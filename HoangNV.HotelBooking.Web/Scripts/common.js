var reservationController = { changeExaminationTime: { init: function (e, a) { let n = !1, t = !1; function i(e) { Object.keys(e).forEach((function (a) { let n = e[a]; switch (a) { case "patientInDepartments": let e = ""; for (var t = 0; t < n.length; t++)e += `<tr> <td>${n[t].departmentCode}</td> <td>${n[t].maxPatient}</td> </tr>`; e = e || "<tr> <td>&nbsp;</td> <td>&nbsp;</td> </tr>", $("#department-table tbody").html(e); break; case "limitedItems": $("input[name = limitedItem]").prop("checked", !1), $.each(n, (function (e, a) { $(`input[limited-id = ${a}]`).prop("checked", !0) })); break; default: a.endsWith("Date") && (n = FormatDate(new Date(n), SYSTEM_DATE_FORMAT, !0)), a.endsWith("Time") && (n = FormatDate(new Date(n), SYSTEM_TIME_FORMAT, !0)), $("#" + a + "-new").val(n) } })) } function o(e) { if (e && e.preventDefault(), "" === $("[name='newExaminationTimeFrameId']").val()) { var a = Resources.E_B_008_01.replace("{0}", Resources.lbl_examination_time_frame); return void $("#ExaminationTimeFramesValidation").text(a) } let i = new FormData; i.append("acceptChangingMedicalPlace", n), i.append("patientId", $("[name='patientId']").val()), i.append("examinationTimeFrameId", $("[name='examinationTimeFrameId']").val()), i.append("newExaminationTimeFrameId", $("[name='newExaminationTimeFrameId']").val()), t ? (CallAction("/Reservation/ChangeExaminationTimeFrame/", "POST", i, m), t = !1) : CallAction("/Reservation/CheckNewExam", "POST", i, l) } function l(e) { let a = new FormData; a.append("acceptChangingMedicalPlace", n), a.append("patientId", $("[name='patientId']").val()), a.append("examinationTimeFrameId", $("[name='examinationTimeFrameId']").val()), a.append("newExaminationTimeFrameId", $("[name='newExaminationTimeFrameId']").val()), e.status === RESPONSE_JSON_STATUS.OK && CallAction("/Reservation/ChangeExaminationTimeFrame/", "POST", a, m), e.status === RESPONSE_JSON_STATUS.ERROR && ShowDialog(e.message, (function () { CallAction("/Reservation/ChangeExaminationTimeFrame/", "POST", a, m) })) } function m(i) { let l = "/Reservation/ChangeExaminationTime?patientId=" + $("[name='patientId']").val() + "&examinationTimeFrameId=" + $("[name='newExaminationTimeFrameId']").val(), m = () => RedirectToPage(l); a || i.status !== RESPONSE_JSON_STATUS.OK ? "C_B_011_01_03" === i.message.message && (t = !0, m = () => { n = !0, o() }) : m = () => RedirectToReservationPage("/Reservation/Index?intendedId=" + e.intendedExaminationId), i.message.message = Resources[i.message.message], ShowDialog(i.message, m) } function r() { let n = new FormData; n.append("PatientId", e.patientId), n.append("ExamTimeFrameId", e.examinationTimeFrameId), CallAction("/Reservation/CancelBooking", "PUT", n, (() => { let n = a ? "/MasterMenu" : "/Reservation/Index?intendedId=" + e.intendedExaminationId, t = CreateNotifyMessage(Resources.S_B_011_01_10, DIALOG_MESSAGE_TYPE.SUCCESS); ShowDialog(t, (() => { RedirectToReservationPage(n) })) })) } $(".ui.dropdown").dropdown({ fullTextSearch: !0, match: "text", message: { noResults: "" } }), $(".ui.search.selection.dropdown input").prop("maxLength", 50), $("#examinationTimeFrameId").on("change", (function () { RedirectToPage("/Reservation/ChangeExaminationTime?patientId=" + $("#patientId").val() + "&examinationTimeFrameId=" + this.value) })), $("#newExaminationTimeFrameId").on("change", (function () { !function (e, a) { $("#ExaminationTimeFramesValidation").text(""); let n = new FormData; n.append("examinationTimeFrameId", a), CallAction(e, "POST", n, i) }("/Reservation/GetExaminationTime", this.value) })), $("#btn-submit").click(o), $("#cancel").click((function () { const n = a ? "/MasterMenu/Index" : "/Reservation/Index?intendedId=" + e.intendedExaminationId; "" !== $("[name='newExaminationTimeFrameId']").val() || "" !== $(".ui.search.selection.dropdown input").val() ? ShowDialog({ displayType: DIALOG_DISPLAY_TYPE.CONFIRM, messageType: DIALOG_MESSAGE_TYPE.WARNING, message: Resources.C_B_011_01_04 }, (() => RedirectToReservationPage(n))) : RedirectToReservationPage(n) })), $("#cancel-booking").click((function () { let e = CreateConfirmMessage(Resources.C_B_011_01_09, DIALOG_MESSAGE_TYPE.WARNING); ShowDialog(e, r) })) } }, patientSeflBooking: { init: function (e, a) { function n(e) { let a = $("#intenedName").val(), n = $("#intendedExaminationStartDate").val(), t = "null" != $("#newMedicalPlace").val() ? $("#newMedicalPlace").val() : "", i = () => { CallAction(`/Reservation/SeflBooking?intendedExaminationId=${a}&intendedExaminationStartDate=${n}&medicalPlaceId=${t}`, "GET", null, (e => { $("#newExaminationTimeFrameId").parent().children(".text").text(""); var a = $("#newExaminationTimeFrameId"); a.children().remove(), a.append("<option></option>"); for (var n = 0; n < e.length; n++)a.append('<option value="' + e[n].value + '">' + e[n].text + "</option>"); LoadExaminationTime("/Reservation/GetExaminationTime", this.value) })) }; e.status === RESPONSE_JSON_STATUS.OK && (i = () => RedirectToReservationPage("/MasterMenu/Index")), e.message.message = Resources[e.message.message], console.log(e.message), ShowDialog(e.message, i) } $(".ui.dropdown").dropdown({ fullTextSearch: !0, match: "text", message: { noResults: "" } }), $("#cancel").click((function () { const e = "/MasterMenu/Index"; "" !== $("[name='newExaminationTimeFrameId']").val() || "" !== $(".ui.search.selection.dropdown input").val() ? ShowDialog({ displayType: DIALOG_DISPLAY_TYPE.CONFIRM, messageType: DIALOG_MESSAGE_TYPE.WARNING, message: Resources.C_B_011_01_04 }, (() => RedirectToReservationPage(e))) : RedirectToReservationPage(e) })), $("#btn-submit").click((function (e) { if (e && e.preventDefault(), "" === $("[name='newExaminationTimeFrameId']").val()) { var a = Resources.E_B_008_01.replace("{0}", Resources.lbl_examination_time_frame); return void $("#ExaminationTimeFramesValidation").text(a) } let t = new FormData; t.append("patientId", $("[name='patientId']").val()), t.append("newExaminationTimeFrameId", $("[name='newExaminationTimeFrameId']").val()), t.append("intendedId", $("[name='intenedName']").val()), CallAction("/Reservation/SeflBooking/", "POST", t, n) })), $("#newExaminationTimeFrameId").on("change", (function () { LoadExaminationTime("/Reservation/GetExaminationTime", this.value) })), $("#patientId").on("change", (function () { reservationController.patientSeflBooking.changeExamDate() })), $("#newMedicalPlace").on("change", (function () { reservationController.patientSeflBooking.getHealthPlace(null, $("#intendedExaminationStartDate").val(), null) })), e < new Date((new Date).toDateString()) ? $(".ui.calendar.filterDate").calendar(GetObjCalendarMinMax("date", "result", new Date((new Date).toDateString()), a, reservationController.patientSeflBooking.changeExamDate)) : $(".ui.calendar.filterDate").calendar(GetObjCalendarMinMax("date", "result", e, a, reservationController.patientSeflBooking.changeExamDate)) }, checkDateByName: function (e, a, n) { $("#intenedName").on("change", (function () { for (var t = 0; t < e.length; t++)if ($("#intenedName").val() == e[t]) { var i = FormatDate(new Date(a[t]), SYSTEM_DATE_FORMAT, !1), o = FormatDate(new Date(n[t]), SYSTEM_DATE_FORMAT, !1); $("#startToEndDate").val(i + " - " + o), new Date(i) < new Date((new Date).toDateString()) ? $(".ui.calendar.filterDate").calendar(GetObjCalendarMinMax("date", "result", new Date((new Date).toDateString()), new Date(o), reservationController.patientSeflBooking.changeExamDate)) : $(".ui.calendar.filterDate").calendar(GetObjCalendarMinMax("date", "result", new Date(i), new Date(o), reservationController.patientSeflBooking.changeExamDate)), reservationController.patientSeflBooking.changeExamDate(null, $("#intendedExaminationStartDate").val(), null) } })) }, changeExamDate: function (e, a, n) { var t = $("#intenedName").val(); "null" != $("#newMedicalPlace").val() && $("#newMedicalPlace").val(); CallAction(`/Reservation/GetMedicalPlaceForPatient?intendedExaminationId=${t}&intendedExaminationStartDate=${a}&medicalPlaceId=null`, "GET", null, (e => { console.log(e), $("#newExaminationTimeFrameId").parent().children(".text").text(""); var a = $("#newMedicalPlace"); $.each(a.children("option"), (function (e, a) { a.remove() })); for (var n = 0; n < e.length; n++)a.append('<option value="' + e[n].value + '">' + e[n].text + "</option>") })), CallAction(`/Reservation/SeflBooking?intendedExaminationId=${t}&intendedExaminationStartDate=${a}&medicalPlaceId=null`, "GET", null, (e => { $("#newExaminationTimeFrameId").parent().children(".text").text(""); var a = $("#newExaminationTimeFrameId"); a.children().remove(), a.append("<option></option>"); for (var n = 0; n < e.length; n++)a.append('<option value="' + e[n].value + '">' + e[n].text + "</option>"); LoadExaminationTime("/Reservation/GetExaminationTime", this.value) })) }, getHealthPlace: function (e, a, n) { var t = $("#intenedName").val(); let i = "null" != $("#newMedicalPlace").val() ? $("#newMedicalPlace").val() : ""; CallAction(`/Reservation/SeflBooking?intendedExaminationId=${t}&intendedExaminationStartDate=${a}&medicalPlaceId=${i}`, "GET", null, (e => { $("#newExaminationTimeFrameId").parent().children(".text").text(""); var a = $("#newExaminationTimeFrameId"); a.children().remove(), a.append("<option></option>"); for (var n = 0; n < e.length; n++)a.append('<option value="' + e[n].value + '">' + e[n].text + "</option>"); LoadExaminationTime("/Reservation/GetExaminationTime", this.value) })) } } }; function RedirectToReservationPage(e) { "/Reservation/Index?intendedId=" == e ? window.history.back() : window.location.href = GetUrl(e) } function LoadExaminationTime(e, a) { $("#ExaminationTimeFramesValidation").text(""); let n = new FormData; n.append("examinationTimeFrameId", a), CallAction(e, "POST", n, RenderExaminationTime) } function RenderExaminationTime(e) { null == e ? ($("#department-table tbody").children().remove(), $("#startDate").val(""), $("#startTime").val(""), $("#endDate").val(""), $("#endTime").val(""), $("#medicalPlaceName").val(""), $("#department-table tbody").html("<tr> <td>&nbsp;</td> <td>&nbsp;</td> </tr>"), $("input[limited-id]").prop("checked", !1)) : Object.keys(e).forEach((function (a) { let n = e[a]; switch (a) { case "patientInDepartments": let e = ""; for (var t = 0; t < n.length; t++)e += `<tr> <td>${n[t].departmentCode}</td> <td>${n[t].maxPatient}</td> </tr>`; e = e || "<tr> <td>&nbsp;</td> <td>&nbsp;</td> </tr>", $("#department-table tbody").html(e); break; case "limitedItems": $("input[name = limitedItem]").prop("checked", !1), $.each(n, (function (e, a) { $(`input[limited-id = ${a}]`).prop("checked", !0) })); break; default: a.endsWith("Date") && (n = FormatDate(new Date(n), SYSTEM_DATE_FORMAT, !0)), a.endsWith("Time") && (n = FormatDate(new Date(n), SYSTEM_TIME_FORMAT, !0)), $("#" + a).val(n) } })) }
const SYSTEM_DATE_FORMAT = "yyyy/MM/dd", SYSTEM_TIME_FORMAT = "hh:mm", PDF_FILENAME_DATE_FORMAT = "yyyyMMdd", RESPONSE_JSON_STATUS = { ERROR: 0, OK: 1 }, DIALOG_DISPLAY_TYPE = { MESSAGE: 0, CONFIRM: 1 }, DIALOG_MESSAGE_TYPE = { SUCCESS: 0, WARNING: 1, ERROR: 2 }, TABLE_PREFIX = { RESERVATION: "reserve" }, INTENDED_EXAMINATION_STATUS = { NEW: 0, ASSIGN: 1, LATCH_ASSIGN: 2, DONE: 3, CANCEL: 4 }, RESERVATION_STATUS = { NotExamined: 1, Examined: 2, Canceled: 3 }; var COMMON_ERROR_AJAX = CreateNotifyMessage(Resources.W_C_006_01, DIALOG_MESSAGE_TYPE.ERROR), isSearching = !1; const popUpData = new Map; var languages = { sEmptyTable: Resources.sEmptyTable, sInfo: Resources.sInfo, sInfoEmpty: Resources.sInfoEmpty, sInfoFiltered: Resources.sInfoFiltered, sLengthMenu: Resources.sLengthMenu, sLoadingRecords: Resources.sLoadingRecords, sProcessing: Resources.sProcessing, sSearch: Resources.sSearch, sZeroRecords: Resources.sZeroRecords, oPaginate: { sFirst: Resources.sFirst, sLast: Resources.sLast, sNext: Resources.sNext, sPrevious: Resources.sPrevious } }; function SetDatatable(e, t, n = !0, a = null) { return { processing: !1, serverSide: !0, ordering: !1, dom: "rtip", ajax: { url: GetUrl(e), type: "POST", async: n, error: function (e) { HideSearchLoading(), ShowCallAjaxError(e) } }, drawCallback: function () { HideSearchLoading(!1), "function" == typeof a && a(), $("[data-popup-id]").each(((e, t) => { let n = t.firstElementChild; n || (n = t), n.scrollWidth === n.clientWidth && n.scrollHeight === n.clientHeight || $(t).popup({ content: popUpData.get($(t).attr("data-popup-id")), context: "#popups", distanceAway: -15, position: "top center" }) })), isSearching = !1 }, autoWidth: !1, language: languages, columns: t, lengthMenu: [[10, 25, 50, -1], [10, 25, 50, "All"]], pagingType: "full_numbers", pageLength: 15,} } function SetOrderableDatatable(e, t, n, a = !0, o = null) { return { processing: !1, serverSide: !0, ordering: n.orderable, order: n.default, dom: "rtip", ajax: { url: GetUrl(e), type: "POST", async: a, error: function (e) { HideSearchLoading(), ShowCallAjaxError(e) } }, drawCallback: function () { HideSearchLoading(!1), "function" == typeof o && o(), $("[data-popup-id]").each(((e, t) => { let n = t.firstElementChild; n || (n = t), n.scrollWidth === n.clientWidth && n.scrollHeight === n.clientHeight || ($(t).popup({ content: popUpData.get($(t).attr("data-popup-id")), context: "#popups", distanceAway: -15, position: "top center" }), isSearching = !1) })) }, autoWidth: !1, language: languages, columns: t, lengthMenu: [[10, 25, 50, -1], [10, 25, 50, "All"]], pagingType: "full_numbers", pageLength: 25 } } function CreateTablePopUpContent(e, t, n, a, o) { popUpData.set(`${n}_${a}_${o}`, t), e.setAttribute("data-popup-id", `${n}_${a}_${o}`) } function ShowCallAjaxError(e) { switch (e.status) { case 401: var t = $("#prefix").data("prefix"), n = window.location.pathname + window.location.search; t && (n = window.location.pathname.replace("/" + t, "") + window.location.search), RedirectToPage("/Account/PreLogin?returnUrl=" + encodeURIComponent(encodeURIComponent(n))); break; case 403: RedirectToPage("/handleError/403"); break; case 404: RedirectToPage("/handleError/404"); break; default: HideAllLoading(), ShowMessageBox(COMMON_ERROR_AJAX) } } function FormatDate(e, t, n = !1) { if (!(e instanceof Date) || isNaN(e)) return null; var a = { hours: n ? e.getUTCHours() : e.getHours(), minutes: n ? e.getUTCMinutes() : e.getMinutes(), years: n ? e.getUTCFullYear() : e.getFullYear(), months: n ? e.getUTCMonth() + 1 : e.getMonth() + 1, dates: n ? e.getUTCDate() : e.getDate() }; switch (Object.keys(a).forEach((function (e) { a[e] = a[e] < 10 ? "0" + a[e] : a[e] })), t) { case "yyyy/MM/dd hh:mm:ss": return a.years + "/" + a.months + "/" + a.dates + " " + a.hours + ":" + a.minutes + ":00"; case "yyyy/MM/dd hh:mm": return a.years + "/" + a.months + "/" + a.dates + " " + a.hours + ":" + a.minutes; case "yyyy/MM/dd": return a.years + "/" + a.months + "/" + a.dates; case "yyyy/dd/MM": return a.years + "/" + a.dates + "/" + a.months; case "yyyy/MM/dd": return a.years + "/" + a.months + "/" + a.dates; case "yyyy-MM-dd": return a.years + "-" + a.months + "-" + a.dates; case "hh:mm": return a.hours + ":" + a.minutes; case "yyyy年mm月dd日": return `${a.years}年${a.months}月${a.dates}日`; case "yyyyMMdd": return `${a.years}${a.months}${a.dates}`; default: return null } } function RedirectToPage(e) { window.location.href = GetUrl(e) } function GetObjCalendar(e, t) { var n = "hs-table-master"; "booking" === t ? n = "hs-table-booking" : "result" === t && (n = "hs-table-result"); var a = { days: Resources.calendarDaysText.split(" "), months: Resources.calendarMonthsText.split(" "), monthsShort: Resources.calendarShortMonthsText.split(" "), today: Resources.calendarTodayText, now: Resources.calendarNowText, year: Resources.year }; return { type: e, monthFirst: !0, popupOptions: { observeChanges: !1 }, formatter: { header: function (e, t, n) { if (!e) return ""; var o = e.getFullYear(), r = e.getMonth(); return o + a.year + a.months[r] }, date: function (e, t) { return e ? e.getFullYear() > 9999 ? "9999/12/31" : FormatDate(e, "yyyy/MM/dd") : "" }, time: function (e, t) { return e ? FormatDate(e, "hh:mm") : "" } }, ampm: !1, text: a, className: { popup: "ui popup " + n }, onChange: function () { $(this).find($("input[check-change]")).trigger("change") } } } function GetObjCalendarCustomPopUp(e, t, n) { var a = "hs-table-master"; "booking" === t ? a = "hs-table-booking" : "result" === t && (a = "hs-table-result"); var o = { days: Resources.calendarDaysText.split(" "), months: Resources.calendarMonthsText.split(" "), monthsShort: Resources.calendarShortMonthsText.split(" "), today: Resources.calendarTodayText, now: Resources.calendarNowText, year: Resources.year }; return { type: e, monthFirst: !0, popupOptions: n, formatter: { header: function (e, t, n) { if (!e) return ""; var a = e.getFullYear(), r = e.getMonth(); return a + o.year + o.months[r] }, date: function (e, t) { return e ? e.getFullYear() > 9999 ? "9999/12/31" : FormatDate(e, "yyyy/MM/dd") : "" }, time: function (e, t) { return e ? FormatDate(e, "hh:mm") : "" } }, ampm: !1, text: o, className: { popup: "ui popup " + a }, onChange: function () { $(this).find($("input[check-change]")).trigger("change") } } } function GetObjCalendarOnChange(e, t, n, a) { var o = "hs-table-master"; "booking" === t ? o = "hs-table-booking" : "result" === t && (o = "hs-table-result"); var r = { days: Resources.calendarDaysText.split(" "), months: Resources.calendarMonthsText.split(" "), monthsShort: Resources.calendarShortMonthsText.split(" "), today: Resources.calendarTodayText, now: Resources.calendarNowText, year: Resources.year }; return { type: e, minDate: n.minDate, maxDate: n.maxDate, monthFirst: !0, formatInput: !1, popupOptions: { observeChanges: !1 }, formatter: { header: function (e, t, n) { if (!e) return ""; var a = e.getFullYear(), o = e.getMonth(); return a + r.year + r.months[o] }, date: function (e, t) { return e ? e.getFullYear() > 9999 ? "9999/12/31" : FormatDate(e, "yyyy/MM/dd") : "" }, time: function (e, t) { return e ? FormatDate(e, "hh:mm") : "" } }, ampm: !1, text: r, className: { popup: "ui popup " + o }, onChange: function (e, t, n) { $(this).find($("input[check-change]")).trigger("change"), void 0 !== a && a(this, e, t, n) } } } function CallAction(e, t, n, a, o = !0) { e = GetUrl(e), $.ajax({ url: e, type: t, contentType: !1, processData: !1, async: o, data: n, beforeSend: ShowLoading, success: function (e) { HideLoading(), a && a(e) }, error: function (e) { HideLoading(), ShowCallAjaxError(e) } }) } function CallActionWithJson(e, t, n, a, o = !0) { e = GetUrl(e), $.ajax({ url: e, type: t, processData: !1, async: o, data: n, contentType: "application/json; charset=utf-8", beforeSend: ShowLoading, success: function (e) { HideLoading(), a && a(e) }, error: function (e) { HideLoading(), ShowCallAjaxError(e) } }) } function ShowLoading() { $("#loading-modal").css("display", "block") } function HideLoading() { $("#loading-modal").css("display", "none") } function ShowDownloadLoading() { $("#download-loading-modal").css("display", "block") } function HideDownloadLoading() { $("#download-loading-modal").css("display", "none") } function ShowSearchLoading() { isSearching = !0, $("#loading-search-modal").css("display", "block") } function HideSearchLoading(e = !0) { e && (isSearching = !1), $("#loading-search-modal").css("display", "none") } function HideAllLoading() { HideLoading(), HideDownloadLoading(), HideSearchLoading() } function UploadFile(e, t, n, a) { for (var o = $("#" + t).get(0).files, r = new FormData, s = 0; s < o.length; s++)r.append(o[s].name, o[s]); if (a) for (const [e, t] of Object.entries(a)) r.append(e, t); CallAction(e, "POST", r, n) } function UploadFileWithInput(e, t, n, a) { for (var o = new FormData, r = 0; r < t.length; r++)o.append(t[r].name, t[r]); if (a) for (const [e, t] of Object.entries(a)) o.append(e, t); CallAction(e, "POST", o, n) } function CompareFormData(e, t) { for (let [n, a] of e.entries()) if (t.get(n) !== a) return !1; return !0 } function StringToBoolean(e) { return "true" === e.toLowerCase() } function RenderStringData(e) { return (e ?? "").replace(/>/g, "&gt;").replace(/</g, "&lt;").replace(/\n/g, "<br>").replace(/"/g, "&quot;") } function GetObjCalendarMinMax(e, t, n, a, o) { var r = "hs-table-master"; "booking" === t ? r = "hs-table-booking" : "result" === t && (r = "hs-table-result"); var s = { days: Resources.calendarDaysText.split(" "), months: Resources.calendarMonthsText.split(" "), monthsShort: Resources.calendarShortMonthsText.split(" "), today: Resources.calendarTodayText, now: Resources.calendarNowText, year: Resources.year }; return { type: e, minDate: n, maxDate: a, monthFirst: !0, popupOptions: { observeChanges: !1 }, formatter: { header: function (e, t, n) { if (!e) return ""; var a = e.getFullYear(), o = e.getMonth(); return a + s.year + s.months[o] }, date: function (e, t) { return e ? FormatDate(e, "yyyy/MM/dd") : "" }, time: function (e, t) { return e ? FormatDate(e, "hh:mm") : "" } }, ampm: !1, text: s, className: { popup: "ui popup " + r }, onChange: o } } function DownloadFile(e, t) { ShowDownloadLoading(); var n = new XMLHttpRequest; e = GetUrl(e), n.open("GET", e, !0), n.responseType = "blob", n.onload = function (e) { if (200 == n.status) { var a = n.response; if ("application/octet-stream" !== a.type) return void RedirectToPage("/MasterMenu/Index"); var o = GetFileNameInContentDisposition(n.getResponseHeader("content-disposition")), r = document.createElement("a"); r.href = window.URL.createObjectURL(a), r.download = o, r.click(), t && t() } else ShowCallAjaxError(n); HideDownloadLoading() }, n.send() } function GetFileNameInContentDisposition(e) { if (!e) return null; const t = /filename\*=UTF-8''([\w%\-\.]+)(?:; |$)/, n = /filename=(["'])(.*?[^\\])\1(?:; |$)/; var a = ""; if (t.test(e)) a = decodeURIComponent(t.exec(e)[1]); else { const t = n.exec(e); null != t && t[2] && (a = t[2]) } return a } function GetUrl(e) { var t = $("#prefix").data("prefix"); return null != t && null != t && "" != t && e.indexOf("/" + t) < 0 && (e = "/" + t + e), e } function IsValidInputNumber(e) { return e.validity.valid } function BackPrePage() { document.referrer ? window.location.href = document.referrer : history.back() } function ObjectifyForm(e) { for (var t = {}, n = 0; n < e.length; n++)t[e[n].name] = e[n].value; return t } function SearchAfterInit(e) { var t = setInterval((() => { isSearching || ($(e).click(), clearInterval(t)) }), 100) } function UpdatePopUp(e, t, n, a = null) { if (e.firstElementChild) { var o = ""; o = null === a ? "<b>" + t + "</b>" + n : a + "<b>" + t + "</b>" + n, $(e).popup({ content: popUpData.get($(e).attr("data-popup-id")), context: "#popups", distanceAway: -15, position: "top center", html: o, variation: "wide" }) } } function CheckValidDate(e, t = null, n = null) { if (0 == isNaN(Date.parse(e))) { let a = new Date(e), o = !0; return t && (o = o && a >= t), n && (o = o && a <= n), o } return !1 }
function ShowDialog(e, o, a) { 0 === e.displayType ? ShowMessageBox(e, o) : ConfirmDialog(e, o, a) } function ShowMessageBox(e, o) { initUI(e), $("#message-box-modal .ui.button").click((function () { void 0 !== o && o(), $("#message-box-modal").modal("hide") })) } function ConfirmDialog(e, o, a) { initUI(e), $("#confirm-dialog .ui.button").click((function () { switch ($(this).data("value")) { case "Yes": void 0 !== o && o(); break; case "No": void 0 !== a && a() }$("#confirm-dialog").modal("hide") })) } function initUI(e) { var o = GetHeaderStyle(e.messageType), a = 0 === e.displayType ? "message-box-modal" : "confirm-dialog"; clearUI(a), $(`#${a} #icon`).addClass(o.iconClass), $(`#${a} .header`).attr("style", "background-color: " + o.color), $(`#${a} #header-content`).text(o.headerContent), $(`#${a} #message`).html(e.message), $(`#${a} .ui.button`).attr("style", "background-color: " + o.color), $("#" + a).modal("show") } function clearUI(e) { $(`#${e} #icon`).removeAttr("class"), $(`#${e} .ui.button`).unbind() } function GetHeaderStyle(e) { switch (e) { case DIALOG_MESSAGE_TYPE.SUCCESS: return { iconClass: "info circle large icon", color: "#0275d8", headerContent: Resources["Header Success Message"] }; case DIALOG_MESSAGE_TYPE.WARNING: return { iconClass: "exclamation triangle large icon", color: "#f0ad4e", headerContent: Resources["Header Warning Message"] }; case DIALOG_MESSAGE_TYPE.ERROR: return { iconClass: "minus circle large icon", color: "#d9534f", headerContent: Resources["Header Error Message"] }; default: return { iconClass: "", color: "", headerContent: "" } } } function CreateMessage(e, o, a) { return { message: e, displayType: a, messageType: o } } function CreateConfirmMessage(e, o) { return CreateMessage(e, o, DIALOG_DISPLAY_TYPE.CONFIRM) } function CreateNotifyMessage(e, o) { return CreateMessage(e, o, DIALOG_DISPLAY_TYPE.MESSAGE) } function ShowMultiDialog(e, o = 0, a, n) { e[o + 1] ? ShowDialog(e[o], (() => { setTimeout((() => { ShowMultiDialog(e, o + 1, a, n) }), 100) }), n) : ShowDialog(e[o], a, n) }
function handleChangeCompanyCode(e, a) { "RegisterCompany" === e && $("#healthFacilityId option:selected").text() != Resources["Default Facility Code"] && "" != $("#companyCode").val().trim() && (a ? $("#OrganizerCode").val($("#healthFacilityId option:selected").text() + $("#companyCode").val().trim()) : $("#OrganizerCode").val($("#healthFacilityId").val() + $("#companyCode").val().trim())), "RegisterCompany" === e && "" == $("#companyCode").val().trim() && $("#OrganizerCode").val("") } $("#bntCancelCompany").click((function () { var e = { displayType: 1, messageType: 1, message: Resources.W_A002_01 }, a = isCompany ? "/CompanyContract/Register" : "/CompanyContract/ListCompanyContractMaster"; oldValue !== $("form").serialize() ? ShowDialog(e, (() => { RedirectToPage(a) })) : RedirectToPage(a) }));
var CrossStatistic = { Init: function () { $("#numberPeople").hide(), $("#Percent").hide(), $("[name = Male][type = hidden]").prop("disabled", !0), $("[name = FeMale][type = hidden]").prop("disabled", !0), $("[name = IsDepartmentVertical][type = hidden]").prop("disabled", !0), $("#parentDepartment").on("change", (() => { var t = new FormData, e = ""; t.append("parentId", $("#parentDepartment").val()), CallAction("/Statistic/GetChildrenDepartments", "Post", t, (t => { $("#department").html("<option value = '0' selected = true>--</option>"), t.forEach((t => { e = e.concat(`<option value=${t.value}>${t.text}</option>`) })), $("#department").append(e) })) })), $("#backSettingCondition").click((function () { RedirectToPage("/Statistic/StatisticCondition" + location.search) })), $("#tableCrossStatistic tr td a").css("cursor", "pointer"); var t = window.location, e = new URL(t); null == e.searchParams.get("IC") || 0 == e.searchParams.get("IC") ? ($("#exam-item-1").hide(), $("#pattern-1-cross").hide()) : (document.addEventListener("DOMContentLoaded", (function () { var t = new FormData, a = ""; t.append("typeId", e.searchParams.get("COIC")), CallAction("/Statistic/GetItems", "Post", t, (t => { t.forEach((t => { a = a.concat(`<option ${t.id == e.searchParams.get("IC") ? "selected = true" : null} value='${t.id}'>${t.name}</option>`) })), $("#exam-item-1 select").append(a) })) }), !1), document.addEventListener("DOMContentLoaded", (function () { var t = new FormData, a = ""; t.append("patternId", e.searchParams.get("PC")), CallAction("/Statistic/GetPatternOptions", "Post", t, (t => { $("#pattern-1-cross select").html(`<option value = '0' selected = true>${Resources.All}</option>`), t.forEach(((t, n) => { a = a.concat(`<option ${t.id == e.searchParams.get("POC") ? "selected = true" : null} value='${t.id}'>${t.name}</option>`) })), $("#pattern-1-cross select").append(a) })) }))) }, RediectUrl: function (t, e, a) { var n = new URLSearchParams(location.search); n.set("XPOI", t), n.set("YPOI", e), n.set("DK", a); var i = "/Statistic/ListStatisticalObject?" + n.toString(); RedirectToPage(i) } };
var examinationTimeFrameController = { schedule: { intendedExaminationStatus: null, intendedExaminationId: 0, isInsert: !0, initDepartments: null, formDataOld: new FormData, stepTime: 9e5, minSelectSpanTime: 9e5, init: function () { function e(n) { if (n.status == RESPONSE_JSON_STATUS.ERROR) if (n.message.displayType == DIALOG_DISPLAY_TYPE.CONFIRM) { for (var i = [], o = 0; o < n.data.length; o++)i.push(CreateConfirmMessage(Resources[n.data[o]], n.message.messageType)); ShowMultiDialog(i, 0, (() => { t($("#importFile")[0].files[0], !0, e) }), a) } else { let e = CreateNotifyMessage(n.message.message, n.message.messageType); ShowDialog(e, a) } else { let e = CreateNotifyMessage(Resources[n.message.message], n.message.messageType); ShowDialog(e, (() => { window.location.reload() }), a) } } function t(e, t, a) { var n = new FormData; n.append("UploadFile", e), n.append("AllowOverride", t), n.append("IntendedExaminationId", examinationTimeFrameController.schedule.intendedExaminationId), CallAction("/ExaminationTimeFrame/ImportTimeFrame", "POST", n, a) } function a() { $("#importFile").val(null) } $("#btnCancel").click((function () { $(".ui.modal").modal("hide") })), $("#srcMedicalPlaceId").on("change", (function () { RedirectToPage("/ExaminationTimeFrame/Schedule?medicalPlaceId=" + $("#srcMedicalPlaceId option:selected").val()) })), $("input:required").on("change", (function () { this.value ? $(`[id='${this.getAttribute("messageOf")}-message-content']`).text("") : $(`[id='${this.getAttribute("messageOf")}-message-content']`).text(Resources.E_B_008_01.replace("{0}", this.getAttribute("data-displayName"))) })), $("#btnSettingCalendar").click((function () { $("#drpTimeStep").val(examinationTimeFrameController.schedule.stepTime).trigger("change"), $("#setting-modal").modal("show") })), $("#btnSaveSetting").click((function () { var e = CreateNotifyMessage(Resources.S_B_014_01, DIALOG_MESSAGE_TYPE.SUCCESS); examinationTimeFrameController.schedule.stepTime = $("#drpTimeStep").val(), CallAction("/ExaminationTimeFrame/UpdateStepTimeUser/?stepTime=" + examinationTimeFrameController.schedule.stepTime, "POST", null, (function () { $("#setting-modal").modal("hide"), ShowDialog(e) })) })), scheduleBulkBooking(), $("#btnCancelBooking").click((function () { examinationTimeFrameController.schedule.getBookingData(); if (examinationTimeFrameController.schedule.formDataOld != $("#frmBooking").serialize()) { var e = "0" === $("#event_edit_container input[name='id']").val() ? Resources.C_B_008_14 : Resources.C_B_008_01_06, t = CreateConfirmMessage(e, DIALOG_MESSAGE_TYPE.WARNING); ShowDialog(t, (() => { $("#event_edit_container").modal("hide") }), (() => { $("#event_edit_container").modal("show") })) } else $("#event_edit_container").modal("hide") })), $("#btnSave").click((function () { $("[data-err-of]").each(((e, t) => { t.id = $(t).data("err-of").replace("[$index]", e) + "-message-content" })), $("[id$='-message-content']").text(""); var e = examinationTimeFrameController.schedule.getBookingData(), t = FormatDate($("#startDay").calendar("get date"), "yyyy-MM-dd") || "", a = FormatDate($("#startTime").calendar("get date"), "hh:mm") || "", n = FormatDate($("#endDay").calendar("get date"), "yyyy-MM-dd") || "", i = FormatDate($("#endTime").calendar("get date"), "hh:mm") || ""; function o(e) { ShowDialog(e.message, (function () { RedirectToPage(e.url) })) } e.append("startDay", t), e.append("startTime", a), e.append("endDay", n), e.append("endTime", i), CallAction("/ExaminationTimeFrame/CheckValidationBooking/", "POST", e, (function (t) { if (t.status === RESPONSE_JSON_STATUS.OK) { if ("0" !== $("#event_edit_container input[name='id']").val()) return void CallAction("/IntendedExamination/GetIntendedStatus?intendedId=" + examinationTimeFrameController.schedule.intendedExaminationId, "GET", null, (t => { if (t == INTENDED_EXAMINATION_STATUS.ASSIGN) { var a = CreateConfirmMessage(Resources.C_B_008_01_02, DIALOG_MESSAGE_TYPE.WARNING); ShowDialog(a, (function () { CallAction("/ExaminationTimeFrame/Booking/", "POST", e, o) }), (function () { $("#event_edit_container").modal("show"), setTimeout((function () { $("#startDate").focus(), $("#startDate").select() }), 20) })) } else CallAction("/ExaminationTimeFrame/Booking/", "POST", e, o) })); CallAction("/ExaminationTimeFrame/Booking/", "POST", e, o) } else if (null !== t.data) { switch ($.each(t.data, (function (e, t) { $.each(t.errors, (function (e, a) { let n = t.key.replaceAll("[", "").replaceAll("]", "").replaceAll(".", ""); $(`#${n}-message-content`).text(a) })) })), t.data[0].key) { case "EndDate": $("#endDay").calendar("focus"); break; case "StartDate": $("#startDay").calendar("focus"); break; case "MaxPatient": null != t.data[1] && "AllowPatient" === t.data[1].key ? $("input[messageOf='AllowPatient']").focus() : $("input[messageOf='MaxPatient']").focus(); break; default: $(`input[messageOf='${t.data[0].key}']`).focus() }$("#event_edit_container").modal("show") } else t.message.displayType === DIALOG_DISPLAY_TYPE.MESSAGE ? ShowDialog(t.message, (function () { $("#event_edit_container").modal("show"), setTimeout((function () { $("#startDate").focus(), $("#startDate").select() }), 20) })) : ShowDialog(t.message, (function () { CallAction("/ExaminationTimeFrame/Booking/", "POST", e, o) }), (function () { $("#event_edit_container").modal("show"), setTimeout((function () { $("#startDate").focus(), $("#startDate").select() }), 20) })) })) })), $("#cb-max-patient").change((function () { this.checked ? ($("#max-patient").val($("#allow-patient").val()), $("#max-patient").prop("readonly", !0), $("#max-patient").addClass("hs-disabled")) : ($("#max-patient").prop("readonly", !1), $("#max-patient").removeClass("hs-disabled")) })), $("#allow-patient").on("change", (function () { $("#cb-max-patient").is(":checked") && $("#max-patient").val($("#allow-patient").val()) })), $("#departments").change((() => { $("#btnAddDepartment").prop("disabled", 0 == $("#departments").val().length) })), $("#btnAddDepartment").click((() => { var e = !1; $("#departments").val().forEach((t => { if (t && 0 == $(`#department-table tbody tr[id="${t}"]`).length) { if ("00000000000" == t) return e = !0, !1; this.createRowDepartment(t, ""), $(`#departments option[value="${t}"]`).remove(), $(`#dropDownDepartmentSchedule a[data-value="${t}"]`).remove() } })), e && ($("#departments option").each((e => { 0 != e ? this.createRowDepartment($("#departments option").eq(e).val(), "") : $('#dropDownDepartmentSchedule a[data-value="00000000000"]').remove() })), $("#departments").empty(), $("#btnAddDepartment").prop("disabled", !0)), 1 === $("#departments option").length && ($("#btnAddDepartment").prop("disabled", !0), $("#departments").empty()) })), $("#importFile").change((function (n) { CallAction("/IntendedExamination/GetIntendedStatus?intendedId=" + examinationTimeFrameController.schedule.intendedExaminationId, "GET", null, (i => { switch (i) { case INTENDED_EXAMINATION_STATUS.ASSIGN: ShowDialog(CreateConfirmMessage(Resources.C_B_008_01_02, DIALOG_MESSAGE_TYPE.WARNING), (() => { t(n.target.files[0], !1, e) }), a); break; case INTENDED_EXAMINATION_STATUS.LATCH_ASSIGN: case INTENDED_EXAMINATION_STATUS.DONE: case INTENDED_EXAMINATION_STATUS.CANCEL: ShowDialog(CreateNotifyMessage(Resources.W_B_007_35, DIALOG_MESSAGE_TYPE.ERROR), a); break; default: t(n.target.files[0], !1, e) } })) })) }, createRowDepartment: function (e, t) { var a = `<tr id="${e}">\n                            <td>\n                                <input name="departmentCode" value="${e}" hidden />\n                                <span>${$(`#departments option[value="${e}"]`).text()}</span>\n                            </td>\n                            <td class="left aligned">\n                                <input required maxlength="5" min="1" value="${t}" name="maxPatientOfDepartment" type="number" />\n                                <span class="field hs-text-red" data-err-of="NumberPatientOfDepartments[$index]MaxPatient"></span>\n                            </td>\n                            <td class="center aligned"><i onclick="examinationTimeFrameController.schedule.deleteDepartmentConfirm('${e}')" class="trash alternate icon"></i></td>\n                        </tr>`; $("#department-table tbody").append(a), ValidateNumber() }, all: `<option value="00000000000">${Resources.All}</option>`, deleteDepartmentConfirm: function (e) { if (examinationTimeFrameController.schedule.isInsert) examinationTimeFrameController.schedule.deleteDepartment(e); else { var t = CreateConfirmMessage(Resources.C_B_008_01_08, DIALOG_MESSAGE_TYPE.WARNING); ShowDialog(t, (() => { examinationTimeFrameController.schedule.deleteDepartment(e) }), (() => { $("#event_edit_container").modal("show") })) } }, deleteDepartment: function (e) { $("#event_edit_container").modal("show"); var t = $(`#department-table tbody tr[id="${e}"] td span`).text(); $("#departments").append(`<option value=${e}>${t}</option>`), $(`#department-table tbody tr[id="${e}"]`).remove(); var a = []; $("#departments option").each((e => { 0 == e && $("#departments option").length > 1 || a.push({ code: $("#departments option").eq(e).val(), text: $("#departments option").eq(e).text() }) })), a.sort((function (e, t) { var a = e.text.toLowerCase(), n = t.text.toLowerCase(), i = e.code.toLowerCase(), o = t.code.toLowerCase(); return a < n ? -1 : a > n ? 1 : a === n ? i < o ? -1 : i > o ? 1 : 0 : 0 })); var n = ""; n = n.concat(examinationTimeFrameController.schedule.all), a.forEach((e => { n = n.concat(`<option value=${e.code}>${e.text}</option>`) })), $("#departments").empty(), $("#departments").append(n), $("#btnAddDepartment").prop("disabled", !0) }, clearDepartmentConfirm: function (e) { if (examinationTimeFrameController.schedule.isInsert) examinationTimeFrameController.schedule.clearDepartments(e); else { var t = CreateConfirmMessage(Resources.C_B_008_01_08, DIALOG_MESSAGE_TYPE.WARNING); ShowDialog(t, (() => { examinationTimeFrameController.schedule.clearDepartments(e) }), (() => { $("#event_edit_container").modal("show") })) } }, clearDepartments: function (e) { $("#event_edit_container").modal("show"), $("#department-table tbody tr").remove(); var t = ""; e.forEach((e => { t = t.concat(`<option value=${e.Value}>${e.Text}</option>`) })), $("#departments").empty(), $("#departments").append(t), $("#btnAddDepartment").prop("disabled", !0) }, getObjFullCalendar: function (e, t, a, n, i) { var o = new Date(e.startDate), r = new Date(e.endDate); return { locale: e.locale, headerToolbar: { left: "", center: "title", right: "today prev,next" }, dayHeaderFormat: { weekday: "short", month: "2-digit", day: "2-digit", omitCommas: !0 }, initialView: "timeGridWeek", initialDate: null == e.initialDate ? FormatDate(o, "yyyy-MM-dd") : e.initialDate, slotDuration: "00:15", height: "auto", firstDay: 1, slotMinTime: e.slotMinTime, slotMaxTime: e.slotMaxTime, titleFormat: { year: "numeric", month: "short" }, allDaySlot: !1, selectable: !0, selectMirror: !0, dayMaxEvents: !0, events: t, eventTimeFormat: { hour: "2-digit", minute: "2-digit", meridiem: !1 }, dateClick: function (t) { CallAction("/IntendedExamination/GetIntendedStatus?intendedId=" + examinationTimeFrameController.schedule.intendedExaminationId, "GET", null, (e => { examinationTimeFrameController.schedule.intendedExaminationStatus = e }), !1), e.editable && examinationTimeFrameController.schedule.intendedExaminationStatus != INTENDED_EXAMINATION_STATUS.LATCH_ASSIGN && examinationTimeFrameController.schedule.intendedExaminationStatus != INTENDED_EXAMINATION_STATUS.DONE && (a(t), this.unselect()) }, select: function (t) { this.unselect(), CallAction("/IntendedExamination/GetIntendedStatus?intendedId=" + examinationTimeFrameController.schedule.intendedExaminationId, "GET", null, (e => { examinationTimeFrameController.schedule.intendedExaminationStatus = e }), !1), e.editable && FormatDate(t.start, "yyyy/MM/dd") === FormatDate(t.end, "yyyy/MM/dd") && examinationTimeFrameController.schedule.intendedExaminationStatus != INTENDED_EXAMINATION_STATUS.LATCH_ASSIGN && examinationTimeFrameController.schedule.intendedExaminationStatus != INTENDED_EXAMINATION_STATUS.DONE && t.end - t.start !== examinationTimeFrameController.schedule.minSelectSpanTime && a(t) }, eventClick: function (t) { e.editable && n(t) }, eventDidMount: function (e) { var t = e.event.extendedProps; if (Object.keys(t).length > 0) { var a = $(e.el).find(".fc-event-title-container"); a.append(`${Resources.lbl_allow_patient}: ${t.allowPatient}`), a.append("<br />"), a.append(`${Resources.lbl_max_patient}: ${t.maxPatient}`), t.assignedPatient > 0 && (a.append("<br />"), a.append(`${Resources.lbl_assigned_patient}: ${t.assignedPatient}`)), t.limitedItems.length > 0 && (a.append("<br />"), a.append(Resources.lbl_limited_item + ":"), $.each(t.limitedItems, (function (e, t) { a.append("<br />"), a.append("- " + t.name) }))); var n = null === t.remark ? "" : t.remark; a.append("<br />"), a.append(`${Resources.lbl_remark}: ${RenderStringData(n)}`) } }, dayCellDidMount(e) { (e.date < o || e.date > r) && (e.el.style.backgroundColor = "#f1f1f1") } } }, InitBookingModal: function (e) { e ? (CallAction("/IntendedExamination/GetIntendedStatus?intendedId=" + examinationTimeFrameController.schedule.intendedExaminationId, "GET", null, (e => { examinationTimeFrameController.schedule.intendedExaminationStatus = e }), !1), [INTENDED_EXAMINATION_STATUS.NEW, INTENDED_EXAMINATION_STATUS.ASSIGN].indexOf(examinationTimeFrameController.schedule.intendedExaminationStatus) < 0 && ($("#btnSave").prop("disabled", !0), $("#btnDelete").prop("disabled", !0)), $("#booking-title").text(Resources.B00_8_header_update), $("#btnSave").prop("value", Resources.btn_update), $("#btnDelete").show(), $("input[name = maxPatient]").prop("readonly", !0), $("input[name = allowPatient]").prop("readonly", !0), $("#event_edit_container input[type = checkbox]:not([name = isMatchAll])").prop("readonly", !0), $("input[name = allowPatient]").addClass("hs-disabled"), $("#isAddMultipleFrame").hide()) : function () { $("#booking-title").text(Resources.B00_8_header_insert), $("#btnSave").prop("value", Resources.btn_registration), $("#btnDelete").hide(), $("#limitMale").prop("checked", !0), $("#limitFemale").prop("checked", !0), $("#cb-max-patient").prop("checked", !0).trigger("change"), $("#isAddMultipleFrame").show(); var e = ""; examinationTimeFrameController.schedule.initDepartments.forEach((t => { e = e.concat(`<option value=${t.value}>${t.text}</option>`) })), $("#departments").empty(), $("#departments").append(e), $("#btnAddDepartment").prop("disabled", !0) }(), $("#end-date-message").hide(), $("#event_edit_container").modal("show"), examinationTimeFrameController.schedule.formDataOld = $("#frmBooking").serialize() }, showInsertModal: function (e) { var t = { start: e.start ?? e.date, end: e.end }; examinationTimeFrameController.schedule.clearInputValue(), examinationTimeFrameController.schedule.setDateInput(t.start, t.end), examinationTimeFrameController.schedule.InitBookingModal(!1), examinationTimeFrameController.schedule.isInsert = !0 }, showUpdateModal: function (e) { examinationTimeFrameController.schedule.clearInputValue(), examinationTimeFrameController.schedule.setInputValue(e), examinationTimeFrameController.schedule.setDateInput(e.event.start, e.event.end), examinationTimeFrameController.schedule.InitBookingModal(!0), examinationTimeFrameController.schedule.isInsert = !1 }, setInputValue: function (e) { $("input[name = id]").val(e.event._def.publicId), $("input[name = name]").val(e.event._def.title), $('select[name="medicalPlaceId"]').val(e.event._def.extendedProps.medicalPlaceId).trigger("change"), $("input[name = maxPatient]").val(e.event._def.extendedProps.maxPatient), $("input[name = allowPatient]").val(e.event._def.extendedProps.allowPatient), $("textarea[name = remark]").val(e.event._def.extendedProps.remark), $.each(e.event._def.extendedProps.limitedItems, (function (e, t) { $(`input[limited-id = ${t.id}]`).prop("checked", !0) })), $("input[name = isMatchAll]").prop("checked", e.event._def.extendedProps.isMatchAll); var t = ""; function a() { var t = new FormData; t.append("id", e.event._def.publicId), t.append("medicalPlaceId", e.event._def.extendedProps.medicalPlaceId), CallAction("/ExaminationTimeFrame/Delete/", "POST", t, n) } function n(e) { ShowDialog(e.message, (function () { RedirectToPage(e.url) })) } examinationTimeFrameController.schedule.initDepartments.forEach((e => { t = t.concat(`<option value=${e.value}>${e.text}</option>`) })), $("#departments").empty(), $("#departments").append(t), $("#btnAddDepartment").prop("disabled", !0), $.each(e.event._def.extendedProps.numberPatientOfDepartments, (function (e, t) { examinationTimeFrameController.schedule.createRowDepartment(t.departmentCode, t.maxPatient), $(`#departments option[value="${t.departmentCode}"]`).remove() })), 1 === $("#departments option").length && ($("#departments option[value='00000000000']").remove(), $('#dropDownDepartmentSchedule a[data-value="00000000000"]').remove()), e.event._def.extendedProps.maxPatient === e.event._def.extendedProps.allowPatient && $("input[name='isNotLimitPatient']").prop("checked", !0).trigger("change"), $("#btnDelete").unbind(), $("#btnDelete").click((function () { if (CallAction("/IntendedExamination/GetIntendedStatus?intendedId=" + examinationTimeFrameController.schedule.intendedExaminationId, "GET", null, (e => { examinationTimeFrameController.schedule.intendedExaminationStatus = e }), !1), "1" !== examinationTimeFrameController.schedule.intendedExaminationStatus) a(); else { var e = CreateConfirmMessage(Resources.C_B_008_01_05, DIALOG_MESSAGE_TYPE.WARNING); ShowDialog(e, (function () { a() }), (function () { $("#event_edit_container").modal("show") })) } })) }, clearInputValue: function () { $("input[name = maxPatient]").prop("readonly", !1), $("input[name = allowPatient]").prop("readonly", !1), $("input[type = checkbox]").prop("readonly", !1), $("input[name = allowPatient]").removeClass("hs-disabled"), $("#btnSave").prop("disabled", !1), $("#btnDelete").prop("disabled", !1), $("[id$='-message-content']").text(""), $("input[name = id]").val("0"), $("input[name = name]").val(""), $("input[name = maxPatient]").val(""), $("input[name = allowPatient]").val(""), $("textarea[name = remark]").val(""), $("input[type = checkbox]").prop("checked", !1).trigger("change"), $("#department-table tbody tr").remove() }, setDateInput: function (e, t) { $("#startDay").calendar("set date", e), $("#startTime").calendar("set date", e), t || (t = new Date(e.getTime() + parseInt(examinationTimeFrameController.schedule.stepTime))), $("#endDay").calendar("set date", t), $("#endTime").calendar("set date", t) }, getBookingData: function () { var e = new FormData($("form#frmBooking")[0]), t = 0; return $.each($("input[name = limitedItem]"), (function (a, n) { n.checked && (e.append(`LimitedItems[${t}].Id`, n.getAttribute("limited-id")), t++) })), t = 0, $.each($("#department-table tbody tr"), (function (a, n) { e.append(`NumberPatientOfDepartments[${t}].DepartmentCode`, $(n).find("input[name=departmentCode]").val()), e.append(`NumberPatientOfDepartments[${t}].MaxPatient`, $(n).find("input[name=maxPatientOfDepartment]").val()), t++ })), e } } };
var examOptionResultController = { detailResultItemLv2ForPatient: { dataCharts: null, init: function () { var e, t = 0, a = document.getElementById("chart-area-wrapper")?.offsetWidth; function l() { var l = function () { var e = examOptionResultController.detailResultItemLv2ForPatient.dataCharts[t], a = examOptionResultController.detailResultItemLv2ForPatient.dataCharts[t + 1], l = examOptionResultController.detailResultItemLv2ForPatient.dataCharts[t - 1]; if ($("#btn-prev-item").prop("disabled", !l), $("#btn-next-item").prop("disabled", !a), !e) return; return $("#current-item").text(e.itemName), e }(); if (!l) return !1; if (!l.results) return $("#result-chart-area").hide(), !0; $("#result-chart-area").show(); let r = []; for (var n = 0; n < l.labels.length; n++)r.push(n < l.results.length ? l.results[n] : null); var s = document.getElementById("result-chart"), i = 50 * l.labels.length; return e ? (e.data.datasets = [{ label: l.itemName, backgroundColor: "rgb(255, 99, 132)", borderColor: "rgb(255, 99, 132)", data: r, segment: {} }], e.data.labels = l.labels, e.update()) : e = new Chart(s, { type: "line", data: { labels: l.labels, datasets: [{ label: l.itemName, backgroundColor: "rgb(255, 99, 132)", borderColor: "rgb(255, 99, 132)", data: r, segment: {} }] }, options: { responsive: !1, plugins: { title: { display: !0, font: { size: 16 } }, legend: { display: !1 } }, scales: { y: { type: "linear", grace: "1%", ticks: { beginAtZero: !0 } } }, maintainAspectRatio: !1 } }), e.resize(i > a ? i : a, 340), !0 } $("#btn-prev-item").click((() => { t -= 1, l() || (t += 1) })), $("#btn-next-item").click((() => { t += 1, l() || (t -= 1) })), examResultController.examResultDetail.setColor(examResultController.examResultDetail.patientInfo.sex), l() } } };
const TYPE_COLOR_ITEM = { BETWEEN: 1, EXACT: 2, INCLUDE: 3, MORETHAN: 4, LESSTHAN: 5, BEGIN: 6, END: 7, NOT: 8, NOT_EMPTY_TEXT: 9, NOT_INCLUDE: 10 }, DETAIL_ITEM_COLOR = { YELLOW: "#ffffbf", RED: "#ffbfbf", WHITE: "#FFFFFF" }, ITEM_COLORS = [{ mapping_code: ["M_0417"], rule: [{ type: TYPE_COLOR_ITEM.INCLUDE, values: ["4", "2"], color: DETAIL_ITEM_COLOR.YELLOW }, { type: TYPE_COLOR_ITEM.INCLUDE, values: ["1", "5"], color: DETAIL_ITEM_COLOR.RED }, { type: TYPE_COLOR_ITEM.EXACT, values: "3", color: DETAIL_ITEM_COLOR.WHITE }] }, { mapping_code: ["M_0516"], rule: [{ type: TYPE_COLOR_ITEM.BETWEEN, values: [130, 139], color: DETAIL_ITEM_COLOR.YELLOW }, { type: TYPE_COLOR_ITEM.BEGIN, values: 140, color: DETAIL_ITEM_COLOR.RED }, { type: TYPE_COLOR_ITEM.LESSTHAN, values: 130, color: DETAIL_ITEM_COLOR.WHITE }] }, { mapping_code: ["M_0516_1", "M_0517"], rule: [{ type: TYPE_COLOR_ITEM.BETWEEN, values: [85, 89], color: DETAIL_ITEM_COLOR.YELLOW }, { type: TYPE_COLOR_ITEM.BEGIN, values: 90, color: DETAIL_ITEM_COLOR.RED }, { type: TYPE_COLOR_ITEM.LESSTHAN, values: 85, color: DETAIL_ITEM_COLOR.WHITE }] }, { mapping_code: ["M_0030", "M_0032", "M_0030_1", "M_0032_1", "M_0031", "M_0033"], rule: [{ type: TYPE_COLOR_ITEM.EXACT, values: 2, color: DETAIL_ITEM_COLOR.RED }, { type: TYPE_COLOR_ITEM.INCLUDE, values: [1, 3], color: DETAIL_ITEM_COLOR.WHITE }] }, { mapping_code: ["M_0619", "M_0624"], rule: [{ type: TYPE_COLOR_ITEM.EXACT, values: "C", color: DETAIL_ITEM_COLOR.YELLOW }, { type: TYPE_COLOR_ITEM.EXACT, values: "D", color: DETAIL_ITEM_COLOR.RED }, { type: TYPE_COLOR_ITEM.INCLUDE, values: ["A", "B", "G"], color: DETAIL_ITEM_COLOR.WHITE }] }, { mapping_code: ["M_0056"], rule: [{ type: TYPE_COLOR_ITEM.EXACT, values: "3", color: DETAIL_ITEM_COLOR.YELLOW }, { type: TYPE_COLOR_ITEM.EXACT, values: "4", color: DETAIL_ITEM_COLOR.RED }, { type: TYPE_COLOR_ITEM.INCLUDE, values: ["1", "2"], color: DETAIL_ITEM_COLOR.WHITE }] }, { mapping_code: ["M_0025", "M_0025_1", "M_0027", "M_0027_1", "M_0026", "M_0028"], rule: [{ type: TYPE_COLOR_ITEM.BETWEEN, values: ["0.2", "0.6"], color: DETAIL_ITEM_COLOR.YELLOW }, { type: TYPE_COLOR_ITEM.INCLUDE, values: ["0.1", "9.9"], color: DETAIL_ITEM_COLOR.RED }, { type: TYPE_COLOR_ITEM.EXACT, values: "", color: DETAIL_ITEM_COLOR.WHITE }] }, { mapping_code: ["M_0078"], rule: [{ type: TYPE_COLOR_ITEM.INCLUDE, values: ["1", "2", "3", "4"], color: DETAIL_ITEM_COLOR.WHITE }] }, { mapping_code: ["M_0099"], rule: [{ type: TYPE_COLOR_ITEM.EXACT, values: "C", color: DETAIL_ITEM_COLOR.YELLOW }, { type: TYPE_COLOR_ITEM.EXACT, values: "D", color: DETAIL_ITEM_COLOR.RED }, { type: TYPE_COLOR_ITEM.INCLUDE, values: ["A", "B"], color: DETAIL_ITEM_COLOR.WHITE }] }, { mapping_code: ["M_0109"], rule: [{ type: TYPE_COLOR_ITEM.INCLUDE, values: ["2", "4"], color: DETAIL_ITEM_COLOR.YELLOW }, { type: TYPE_COLOR_ITEM.EXACT, values: "3", color: DETAIL_ITEM_COLOR.RED }, { type: TYPE_COLOR_ITEM.EXACT, values: "1", color: DETAIL_ITEM_COLOR.WHITE }] }, { mapping_code: ["M_0117", "M_0117_1", "M_0118"], rule: [{ type: TYPE_COLOR_ITEM.BETWEEN, values: [21, 23], color: DETAIL_ITEM_COLOR.YELLOW }, { type: TYPE_COLOR_ITEM.MORETHAN, values: 23, color: DETAIL_ITEM_COLOR.RED }, { type: TYPE_COLOR_ITEM.LESSTHAN, values: 21, color: DETAIL_ITEM_COLOR.WHITE }] }, { mapping_code: ["M_0062", "M_0063", "M_0612"], rule: [{ type: TYPE_COLOR_ITEM.EXACT, values: 2, color: DETAIL_ITEM_COLOR.YELLOW }, { type: TYPE_COLOR_ITEM.EXACT, values: 3, color: DETAIL_ITEM_COLOR.RED }, { type: TYPE_COLOR_ITEM.EXACT, values: 1, color: DETAIL_ITEM_COLOR.WHITE }] }, { mapping_code: ["M_0149"], rule: [{ type: TYPE_COLOR_ITEM.EXACT, values: "3", color: DETAIL_ITEM_COLOR.YELLOW }, { type: TYPE_COLOR_ITEM.INCLUDE, values: ["5", "4"], color: DETAIL_ITEM_COLOR.RED }, { type: TYPE_COLOR_ITEM.INCLUDE, values: ["1", "2"], color: DETAIL_ITEM_COLOR.WHITE }] }, { mapping_code: ["M_0167"], rule: [{ type: TYPE_COLOR_ITEM.EXACT, values: "3", color: DETAIL_ITEM_COLOR.YELLOW }, { type: TYPE_COLOR_ITEM.INCLUDE, values: ["5", "4"], color: DETAIL_ITEM_COLOR.RED }, { type: TYPE_COLOR_ITEM.INCLUDE, values: ["1", "2"], color: DETAIL_ITEM_COLOR.WHITE }] }, { mapping_code: ["M_0597"], rule: [{ type: TYPE_COLOR_ITEM.EXACT, values: "3", color: DETAIL_ITEM_COLOR.YELLOW }, { type: TYPE_COLOR_ITEM.INCLUDE, values: ["5", "4"], color: DETAIL_ITEM_COLOR.RED }, { type: TYPE_COLOR_ITEM.INCLUDE, values: ["1", "2"], color: DETAIL_ITEM_COLOR.WHITE }] }, { mapping_code: ["M_0598"], rule: [{ type: TYPE_COLOR_ITEM.INCLUDE, values: ["3", "4", "5"], color: DETAIL_ITEM_COLOR.RED }, { type: TYPE_COLOR_ITEM.INCLUDE, values: ["0", "1", "2"], color: DETAIL_ITEM_COLOR.WHITE }] }, { mapping_code: ["M_0126"], rule: [{ type: TYPE_COLOR_ITEM.INCLUDE, values: ["B", "C", "D"], color: DETAIL_ITEM_COLOR.RED }, { type: TYPE_COLOR_ITEM.EXACT, values: "A", color: DETAIL_ITEM_COLOR.WHITE }] }, { mapping_code: ["M_0667"], rule: [{ type: TYPE_COLOR_ITEM.INCLUDE, values: ["C", "C03", "C06", "C12", "H"], color: DETAIL_ITEM_COLOR.YELLOW }, { type: TYPE_COLOR_ITEM.EXACT, values: "D", color: DETAIL_ITEM_COLOR.RED }, { type: TYPE_COLOR_ITEM.INCLUDE, values: ["A", "B"], color: DETAIL_ITEM_COLOR.WHITE }] }, { mapping_code: ["M_0169"], rule: [{ type: TYPE_COLOR_ITEM.EXACT, values: "3", color: DETAIL_ITEM_COLOR.YELLOW }, { type: TYPE_COLOR_ITEM.INCLUDE, values: ["4", "5"], color: DETAIL_ITEM_COLOR.RED }, { type: TYPE_COLOR_ITEM.INCLUDE, values: ["1", "2"], color: DETAIL_ITEM_COLOR.WHITE }] }, { mapping_code: ["M_0427"], rule: [{ type: TYPE_COLOR_ITEM.EXACT, values: "4", color: DETAIL_ITEM_COLOR.YELLOW }, { type: TYPE_COLOR_ITEM.EXACT, values: "5", color: DETAIL_ITEM_COLOR.RED }, { type: TYPE_COLOR_ITEM.EXACT, values: "3", color: DETAIL_ITEM_COLOR.WHITE }] }, { mapping_code: ["M_0704"], rule: [{ type: TYPE_COLOR_ITEM.EXACT, values: "03", color: DETAIL_ITEM_COLOR.YELLOW }, { type: TYPE_COLOR_ITEM.INCLUDE, values: ["04", "05", "06", "07", "08"], color: DETAIL_ITEM_COLOR.RED }, { type: TYPE_COLOR_ITEM.INCLUDE, values: ["01", "02"], color: DETAIL_ITEM_COLOR.WHITE }] }, { mapping_code: ["M_0707"], rule: [{ type: TYPE_COLOR_ITEM.INCLUDE, values: ["02", "03", "04", "05", "06", "07", "08"], color: DETAIL_ITEM_COLOR.YELLOW }, { type: TYPE_COLOR_ITEM.EXACT, values: "01", color: DETAIL_ITEM_COLOR.WHITE }] }, { mapping_code: ["M_0709", "M_0712", "M_0713", "M_0714", "M_0715", "M_0716", "M_0717", "M_0718", "M_0720"], rule: [{ type: TYPE_COLOR_ITEM.NOT_EMPTY_TEXT, values: "", color: DETAIL_ITEM_COLOR.RED }] }, { mapping_code: ["M_0252"], rule: [{ type: TYPE_COLOR_ITEM.EXACT, values: 2, color: DETAIL_ITEM_COLOR.YELLOW }, { type: TYPE_COLOR_ITEM.EXACT, values: 3, color: DETAIL_ITEM_COLOR.RED }, { type: TYPE_COLOR_ITEM.EXACT, values: 1, color: DETAIL_ITEM_COLOR.WHITE }] }, { mapping_code: ["M_0706"], rule: [{ type: TYPE_COLOR_ITEM.INCLUDE, values: ["02", "03", "04", "05", "06", "07", "08"], color: DETAIL_ITEM_COLOR.YELLOW }] }, { mapping_code: ["M_0710"], rule: [{ type: TYPE_COLOR_ITEM.INCLUDE, values: ["02", "03", "04", "05", "06", "07", "08"], color: DETAIL_ITEM_COLOR.RED }] }, { mapping_code: ["M_0708"], rule: [{ type: TYPE_COLOR_ITEM.INCLUDE, values: ["02", "03", "04", "05", "06", "07", "08"], color: DETAIL_ITEM_COLOR.YELLOW }] }, { mapping_code: ["M_0711"], rule: [{ type: TYPE_COLOR_ITEM.INCLUDE, values: ["12", "13", "14", "15", "16", "17", "18"], color: DETAIL_ITEM_COLOR.YELLOW }] }, { mapping_code: ["M_0719"], rule: [{ type: TYPE_COLOR_ITEM.INCLUDE, values: ["02", "03", "04", "05", "06", "07", "08"], color: DETAIL_ITEM_COLOR.RED }] }, { mapping_code: ["02701", "02703", "85094", "86216", "86218", "86220", "89212", "89209", "89210", "89211"], rule: [{ type: TYPE_COLOR_ITEM.INCLUDE, values: ["疑陽性（±）", "陽性（＋）"], color: DETAIL_ITEM_COLOR.RED }, { type: TYPE_COLOR_ITEM.EXACT, values: "陰性（－）", color: DETAIL_ITEM_COLOR.WHITE }, { type: TYPE_COLOR_ITEM.NOT_INCLUDE, values: ["疑陽性（±）", "陽性（＋）", "陰性（－）"], color: DETAIL_ITEM_COLOR.WHITE }] }, { mapping_code: ["M_0780"], rule: [{ type: TYPE_COLOR_ITEM.EXACT, values: "5", color: DETAIL_ITEM_COLOR.RED }, { type: TYPE_COLOR_ITEM.EXACT, values: "3", color: DETAIL_ITEM_COLOR.YELLOW }] }, { mapping_code: ["M_0494"], rule: [{ type: TYPE_COLOR_ITEM.INCLUDE, values: ["5", "6", "7", "8"], color: DETAIL_ITEM_COLOR.RED }, { type: TYPE_COLOR_ITEM.INCLUDE, values: ["3", "4"], color: DETAIL_ITEM_COLOR.YELLOW }] }, { mapping_code: ["M_0916"], rule: [{ type: TYPE_COLOR_ITEM.EXACT, values: "4", color: DETAIL_ITEM_COLOR.RED }, { type: TYPE_COLOR_ITEM.INCLUDE, values: ["3", "5"], color: DETAIL_ITEM_COLOR.YELLOW }] }], ITEM_COLORS_BY_SEX = [{ mapping_code: ["M_0705"], sex: 1, rule: [{ type: TYPE_COLOR_ITEM.EXACT, values: "03", color: DETAIL_ITEM_COLOR.YELLOW }, { type: TYPE_COLOR_ITEM.INCLUDE, values: ["04", "05", "06", "07", "08"], color: DETAIL_ITEM_COLOR.RED }, { type: TYPE_COLOR_ITEM.INCLUDE, values: ["01", "02"], color: DETAIL_ITEM_COLOR.WHITE }] }, { mapping_code: ["M_0705"], sex: 2, rule: [{ type: TYPE_COLOR_ITEM.EXACT, values: "03", color: DETAIL_ITEM_COLOR.YELLOW }, { type: TYPE_COLOR_ITEM.INCLUDE, values: ["04", "05", "06", "07", "08"], color: DETAIL_ITEM_COLOR.RED }, { type: TYPE_COLOR_ITEM.INCLUDE, values: ["01", "02"], color: DETAIL_ITEM_COLOR.WHITE }] }], ITEM_COLORS_BY_REFERENCE = [{ mapping_code: ["M_0022"], reference_code: "M_0417", rule: [{ type: TYPE_COLOR_ITEM.INCLUDE, values: ["2", "4"], color: DETAIL_ITEM_COLOR.YELLOW }, { type: TYPE_COLOR_ITEM.INCLUDE, values: ["1", "5"], color: DETAIL_ITEM_COLOR.RED }, { type: TYPE_COLOR_ITEM.EXACT, values: "3", color: DETAIL_ITEM_COLOR.WHITE }] }, { mapping_code: ["M_0036"], reference_code: "M_0421", level: 1, rule: [{ type: TYPE_COLOR_ITEM.INCLUDE, values: ["4", "9"], color: DETAIL_ITEM_COLOR.YELLOW }, { type: TYPE_COLOR_ITEM.EXACT, values: "5", color: DETAIL_ITEM_COLOR.RED }, { type: TYPE_COLOR_ITEM.INCLUDE, values: ["1", "2", "3", "6", "7", "8"], color: DETAIL_ITEM_COLOR.WHITE }] }, { mapping_code: ["M_0037"], reference_code: "M_0422", level: 1, rule: [{ type: TYPE_COLOR_ITEM.INCLUDE, values: ["4", "9"], color: DETAIL_ITEM_COLOR.YELLOW }, { type: TYPE_COLOR_ITEM.EXACT, values: "5", color: DETAIL_ITEM_COLOR.RED }, { type: TYPE_COLOR_ITEM.INCLUDE, values: ["1", "2", "3", "6", "7", "8"], color: DETAIL_ITEM_COLOR.WHITE }] }, { mapping_code: ["M_0038"], reference_code: "M_0423", level: 1, rule: [{ type: TYPE_COLOR_ITEM.INCLUDE, values: ["4", "9"], color: DETAIL_ITEM_COLOR.YELLOW }, { type: TYPE_COLOR_ITEM.EXACT, values: "5", color: DETAIL_ITEM_COLOR.RED }, { type: TYPE_COLOR_ITEM.INCLUDE, values: ["1", "2", "3", "6", "7", "8"], color: DETAIL_ITEM_COLOR.WHITE }] }, { mapping_code: ["M_0039"], reference_code: "M_0424", level: 1, rule: [{ type: TYPE_COLOR_ITEM.INCLUDE, values: ["4", "9"], color: DETAIL_ITEM_COLOR.YELLOW }, { type: TYPE_COLOR_ITEM.EXACT, values: "5", color: DETAIL_ITEM_COLOR.RED }, { type: TYPE_COLOR_ITEM.INCLUDE, values: ["1", "2", "3", "6", "7", "8"], color: DETAIL_ITEM_COLOR.WHITE }] }, { mapping_code: ["M_0064"], reference_code: "M_0065", rule: [{ type: TYPE_COLOR_ITEM.EXACT, values: "2", color: DETAIL_ITEM_COLOR.YELLOW }, { type: TYPE_COLOR_ITEM.EXACT, values: "3", color: DETAIL_ITEM_COLOR.RED }, { type: TYPE_COLOR_ITEM.EXACT, values: "1", color: DETAIL_ITEM_COLOR.WHITE }] }, { mapping_code: ["M_0066"], reference_code: "M_0067", rule: [{ type: TYPE_COLOR_ITEM.EXACT, values: "2", color: DETAIL_ITEM_COLOR.YELLOW }, { type: TYPE_COLOR_ITEM.EXACT, values: "3", color: DETAIL_ITEM_COLOR.RED }, { type: TYPE_COLOR_ITEM.EXACT, values: "1", color: DETAIL_ITEM_COLOR.WHITE }] }, { mapping_code: ["M_0068"], reference_code: "M_0069", rule: [{ type: TYPE_COLOR_ITEM.EXACT, values: "2", color: DETAIL_ITEM_COLOR.YELLOW }, { type: TYPE_COLOR_ITEM.EXACT, values: "3", color: DETAIL_ITEM_COLOR.RED }, { type: TYPE_COLOR_ITEM.EXACT, values: "1", color: DETAIL_ITEM_COLOR.WHITE }] }, { mapping_code: ["M_0070"], reference_code: "M_0071", rule: [{ type: TYPE_COLOR_ITEM.EXACT, values: "2", color: DETAIL_ITEM_COLOR.YELLOW }, { type: TYPE_COLOR_ITEM.EXACT, values: "3", color: DETAIL_ITEM_COLOR.RED }, { type: TYPE_COLOR_ITEM.EXACT, values: "1", color: DETAIL_ITEM_COLOR.WHITE }] }, { mapping_code: ["M_0072"], reference_code: "M_0073", rule: [{ type: TYPE_COLOR_ITEM.EXACT, values: "2", color: DETAIL_ITEM_COLOR.YELLOW }, { type: TYPE_COLOR_ITEM.EXACT, values: "3", color: DETAIL_ITEM_COLOR.RED }, { type: TYPE_COLOR_ITEM.EXACT, values: "1", color: DETAIL_ITEM_COLOR.WHITE }] }, { mapping_code: ["M_0074"], reference_code: "M_0075", rule: [{ type: TYPE_COLOR_ITEM.EXACT, values: "2", color: DETAIL_ITEM_COLOR.YELLOW }, { type: TYPE_COLOR_ITEM.EXACT, values: "3", color: DETAIL_ITEM_COLOR.RED }, { type: TYPE_COLOR_ITEM.EXACT, values: "1", color: DETAIL_ITEM_COLOR.WHITE }] }, { mapping_code: ["M_0076"], reference_code: "M_0077", rule: [{ type: TYPE_COLOR_ITEM.EXACT, values: "2", color: DETAIL_ITEM_COLOR.YELLOW }, { type: TYPE_COLOR_ITEM.EXACT, values: "3", color: DETAIL_ITEM_COLOR.RED }, { type: TYPE_COLOR_ITEM.EXACT, values: "1", color: DETAIL_ITEM_COLOR.WHITE }] }, { mapping_code: ["M_0655"], reference_code: "M_0489", level: 1, rule: [{ type: TYPE_COLOR_ITEM.EXACT, values: "4", color: DETAIL_ITEM_COLOR.YELLOW }, { type: TYPE_COLOR_ITEM.EXACT, values: "5", color: DETAIL_ITEM_COLOR.RED }, { type: TYPE_COLOR_ITEM.INCLUDE, values: ["1", "2", "3", "6", "7", "8", "9"], color: DETAIL_ITEM_COLOR.WHITE }] }, { mapping_code: ["M_0656"], reference_code: "M_0490", level: 1, rule: [{ type: TYPE_COLOR_ITEM.EXACT, values: "4", color: DETAIL_ITEM_COLOR.YELLOW }, { type: TYPE_COLOR_ITEM.EXACT, values: "5", color: DETAIL_ITEM_COLOR.RED }, { type: TYPE_COLOR_ITEM.INCLUDE, values: ["1", "2", "3", "6", "7", "8", "9"], color: DETAIL_ITEM_COLOR.WHITE }] }, { mapping_code: ["M_0930"], reference_code: "M_0530", level: 1, rule: [{ type: TYPE_COLOR_ITEM.EXACT, values: "4", color: DETAIL_ITEM_COLOR.YELLOW }, { type: TYPE_COLOR_ITEM.EXACT, values: "5", color: DETAIL_ITEM_COLOR.RED }, { type: TYPE_COLOR_ITEM.INCLUDE, values: ["1", "2", "3", "6", "7", "8", "9"], color: DETAIL_ITEM_COLOR.WHITE }] }, { mapping_code: ["M_0610"], reference_code: "M_0443", level: 1, rule: [{ type: TYPE_COLOR_ITEM.INCLUDE, values: ["3", "9"], color: DETAIL_ITEM_COLOR.YELLOW }, { type: TYPE_COLOR_ITEM.EXACT, values: "5", color: DETAIL_ITEM_COLOR.RED }, { type: TYPE_COLOR_ITEM.INCLUDE, values: ["1", "2", "4", "6", "7", "8"], color: DETAIL_ITEM_COLOR.WHITE }] }, { mapping_code: ["M_0611"], reference_code: "M_0492", level: 1, rule: [{ type: TYPE_COLOR_ITEM.INCLUDE, values: ["3", "9"], color: DETAIL_ITEM_COLOR.YELLOW }, { type: TYPE_COLOR_ITEM.EXACT, values: "5", color: DETAIL_ITEM_COLOR.RED }, { type: TYPE_COLOR_ITEM.INCLUDE, values: ["1", "2", "4", "6", "7", "8"], color: DETAIL_ITEM_COLOR.WHITE }] }]; var examResultController = { search: { enumItem1: null, enumItem2: null, genderEnumDisplay: null, workTypeDisplay: null, gmcDisplay: null, judgmentDisplay: null, detailedItemSimpleColumnAmount: 0, searchSessionName: "searchParams", isContractUser: null, invertSelectMode: !1, selectedResults: [], pdfExanResultType: 0, init: function (e, t) { function a() { $("#pdf-password-popup").removeClass("hide") } function l() { $("#pdf-password-popup").addClass("hide") } function o() { $("#pdf-password-temp").val(""), $("#pdf-password").val(""), $("#pdf-password-err").text(""), $("#pdf-password-err").hide(), examResultController.search.pdfExanResultType = 0 } examResultController.search.detailedItemSimpleColumnAmount = t, $(".hs-tab").length && $(".hs-tab > .item").tab(), $(".ui.accordion").accordion({ exclusive: !1 }), $(".ui.calendar").calendar(GetObjCalendar("date", "result")), $("#btn-download-csv").click((function (e) { let t; e.preventDefault(), u(!1) && (t = examResultController.search.getSearchData(), t.Columns = r.map((e => ({ data: e.data }))), t.Orders = c.order().map((e => ({ column: e[0], dir: e[1] })))), location = GetUrl("/ExamResult/DownloadExamResults?searchValue=" + (t ? JSON.stringify(t) : "")) })), $("#export").click((function (e) { e.preventDefault(), u(!1) && a() })), $("#sendBulkEmail").click((function (e) { e.preventDefault(), u(!1) && ShowDialog(CreateConfirmMessage("" + Resources.C_R_001_07, DIALOG_MESSAGE_TYPE.WARNING), (() => { const e = examResultController.search.getSearchData(); e.invertSelectMode = examResultController.search.invertSelectMode, e.selectedIds = examResultController.search.selectedResults; var t = new FormData; t.append("searchValue", JSON.stringify(e)), CallAction("/ExamResult/SendBulkEmailPatients", "POST", t, (e => { null != e.message.message && "" != e.message.message && ShowMessageBox(e.message) })) })) })), $("#btn-personal-result").click((function (e) { e.preventDefault(), u(!1) && (a(), examResultController.search.pdfExanResultType = 1) })), $("#btn-reinspection").click((function (e) { e.preventDefault(), u(!1) && (a(), examResultController.search.pdfExanResultType = 2) })), $("#btn-personal-management").click((function (e) { e.preventDefault(), u(!1) && (a(), examResultController.search.pdfExanResultType = 3) })), $("#popup__header-close").click((function () { o(), l() })), $("#popup__footer-ok").click((function () { let e = $("#pdf-password-temp").val(), t = function () { let e = $("#pdf-password-temp").val(); if (!e) return "E_R_001_01"; if (e.length > 50) return "E_C_008_02"; if (!new RegExp("^[a-zA-Z0-9*.!@#$%^&(){}\\[\\]:\";'<>,.?\\/~`_+-=\\\\|]*$").test(e)) return "E_R_001_06"; return "" }(); if (t) !function (e) { let t = Resources[e]; "E_R_001_01" === e && (t = Resources[e]); "E_C_008_02" === e && (t = t.replace("{0}", Resources.pdfPassword), t = t.replace("{1}", 50)); $("#pdf-password-err").text(t), $("#pdf-password-err").show() }(t); else { if ($("#pdf-password").val(e), 0 != examResultController.search.pdfExanResultType) examResultController.search.DownloadPdfExamResult(examResultController.search.pdfExanResultType); else { let e = examResultController.search.getSearchData(); e.selectedIds = examResultController.search.selectedResults, e.invertSelectMode = examResultController.search.invertSelectMode, RedirectToPage("/ExamResult/ExportExamResults?searchValue=" + (e ? JSON.stringify(e) : "")) } o(), l() } })), setReturnUrl = function () { localStorage.setItem("ExamResultDetail-return-url", window.location.href) }; var r = [{ data: null, title: Resources.All + '<input type="checkbox" class="hs-checkbox" id="check-all" onclick="examResultController.search.SelectAllRows(this)" />', width: "15px", className: "checkbox-cell", orderable: !1, render: function (e) { const t = $("#check-all").prop("checked"); let a = t; if (!t) { const t = examResultController.search.selectedResults.includes(e.id.toString()); (examResultController.search.invertSelectMode && !t || !examResultController.search.invertSelectMode && t) && (a = !0) } return `<input class="checkItem hs-checkbox" type="checkbox" ${a ? "checked" : ""} value="${e.id}" onclick="examResultController.search.SelectRow(this)" />` } }, { data: "patientCode", title: Resources["Patient Code"], render: function (t, a, l) { return `<a href='${GetUrl(`/ExamResult/${e ? "DetailResultForIndustrialDoctor" : "ExamResultDetail"}?id=${l.id}`)}' onclick="setReturnUrl()">${t}</a>` } }, { data: "patientName", title: Resources["Patient Name"], render: function (e) { return `<div>${RenderStringData(e)}</div>` } }, { data: "patientNameKana", title: Resources["Patient Name Kana"], render: function (e) { return `<div>${RenderStringData(e)}</div>` } }, { data: "department", title: Resources["Department Code"], width: "310px", render: function (e) { return RenderStringData(e) }, className: "hs-overflow-ellipsis", createdCell: function (e, t, a, l, o) { CreateTablePopUpContent(e, t, TABLE_PREFIX.RESERVATION, l, o) } }, { data: null, title: Resources["Exam Date"], width: "100px", orderable: !1, render: function (e) { return FormatDate(new Date(e.examinationDate), "yyyy/MM/dd") }, className: "dt-body-center", defaultContent: "" }, { data: "sex", title: Resources.Gender, width: "35px", orderable: !1, className: "dt-body-center", render: function (e) { return examResultController.search.genderEnumDisplay[e] } }, { data: null, title: Resources["Date Of Birth"], width: "160px", orderable: !1, render: function (e) { return `<div>${FormatDate(new Date(e.dob), "yyyy/MM/dd")} (${e.yearOld}${Resources.YearOld})</div>` }, defaultContent: "" }, { data: "workType", title: Resources.WorkType, orderable: !1, render: function (e) { return `<div>${RenderStringData(examResultController.search.workTypeDisplay[e])}</div>` } }, { data: "gmc", title: Resources["Guidance Management Classification"], orderable: !1, render: function (e) { return `<div>${RenderStringData(examResultController.search.gmcDisplay[e])}</div>` } }, { data: "judgmentFunction", visible: !1, orderable: !1, render: function (e) { return `<div>${RenderStringData(examResultController.search.judgmentDisplay[e])}</div>` } }, { data: "item1", title: Resources.Item1, visible: !1, orderable: !1, render: function (e) { if (e) return examResultController.search.enumItem1 ? i(e, examResultController.search.enumItem1) : e }, defaultContent: "" }, { data: "item2", title: Resources.Item2, visible: !1, orderable: !1, render: function (e) { if (e) return examResultController.search.enumItem2 ? i(e, examResultController.search.enumItem2) : e }, defaultContent: "" }, { data: null, render: function (e) { return `<a class="hs-a-modal" onclick="DownloadFile('/Pdf/DownloadR001_01?id=${e.id}')"><i class="large file pdf icon"></i></a>` }, title: Resources["Individual Result"], className: "dt-body-center", orderable: !1 }, { data: null, render: function (e) { return 1 != e.hasPDF ? "" : `<a class="hs-a-modal" onclick="RedirectToPage('/ExamResultReview/GetDownloadPdf?id=${e.id}'); return false;" href="#"><i class="large file pdf icon"></i></a>` }, title: Resources["Notice Of Re-Checking"], orderable: !1, className: "dt-body-center" }, { data: null, render: function (e) { return `<a class="hs-a-modal" onclick="DownloadFile('/Pdf/DownloadR001_02?id=${e.id}')"><i class="large file pdf icon"></i></a>` }, title: Resources["Management Personal"], orderable: !1, className: "dt-body-center" }, { data: null, render: function (e) { return 0 == e.isViewed ? '<i class="eye large slash icon"></i>' : '<i class="eye large icon"></i>' }, title: Resources["View Status Exam"], orderable: !1, className: "dt-body-center", visible: examResultController.search.isContractUser }]; const n = r.findIndex((e => "judgmentFunction" === e.data)); for (let e = 2 + examResultController.search.detailedItemSimpleColumnAmount; e >= 3; e--)r.splice(n + 1, 0, { data: "item" + e, visible: !1, orderable: !1, render: function (t) { if (t) return examResultController.search["enumItem" + e] ? i(t, examResultController.search["enumItem" + e]) : t }, defaultContent: "" }); function i(e, t) { for (var a = [...new Set(e.split(";"))], l = "", o = 0; o < a.length; o++) { var r = t[a[o]]; r && (l += "<br/>" + r) } return l.replace("<br/>", "") } const s = SetDatatable(GetUrl("/ExamResult/GetList"), r, !0, (function () { d || $("#tableExamResult .dataTables_empty").html(Resources.R001_DefaultEmtyData) })); delete s.ordering, s.order = [], s.orderMulti = !1; var c = $("#tableExamResult").DataTable(s), d = !1; function u(e = !0) { var t = function (e = !0) { if (!$("#txtStartDate").val() && !$("#txtEndDate").val()) return e && E("txtStartDate", "E_R_001_01"), !1; if ($("#txtEndDate").val() && $("#txtStartDate").val() > $("#txtEndDate").val()) { if (e) $("span[name=msg-for-txtStartDate]").text(Resources.E_R_001_02); return !1 } return !0 }(e) && function (e = !0) { if (!IsValidInputNumber($("#startAge")[0])) return e && E("startAge", "E_R_001_03", !1), !1; if (!IsValidInputNumber($("#endAge")[0])) return e && E("endAge", "E_R_001_03", !1), !1; if ("" !== $("#endAge").val() && Number($("#startAge").val()) > Number($("#endAge").val())) return e && E("startAge", "E_R_001_04", !1), !1; return !0 }(e) && function (e = !0) { const t = $("#GMCFrom"), a = $("#GMCTo"); if ("0" !== a.val() && Number(t.val()) > Number(a.val())) return e && E("GMCFrom", "E_R_001_05", !1), !1; return !0 }(e) && function (e = !0) { if ("0" == $("#option-search-judgment").val()) return !0; const t = $("#judgmentFunction"), a = $("#judgmentFrom"), l = $("#judgmentTo"); if (!t.val()) return e && E("judgmentFunction", "E_R_001_01"), !1; if ("0" === a.val() && "0" === l.val()) return e && E("judgmentFrom", "E_R_001_01"), !1; if ("0" !== l.val() && Number(a.val()) > Number(l.val())) return e && E("judgmentFrom", "E_R_001_05", !1), !1; return !0 }(e) && function (e = !0) { for (var t = 3; t < 3 + examResultController.search.detailedItemSimpleColumnAmount; t++)if (!a(t)) return !1; return !0; function a(t) { const a = $("#option-search-item-" + t).val(); if (!a || "0" === a) return !0; if (!$(`#exam-item-type-${t} select`).val()) return e && E("exam-item-type-" + t, "E_R_001_01"), !1; if (!$(`#exam-item-${t} select`).val()) return e && E("exam-item-" + t, "E_R_001_01"), !1; if ($(`#exam-item-${t} :selected`).data("type")) { const a = $(`#from-${t} input`), l = $(`#to-${t} input`); if (!IsValidInputNumber(a[0])) return e && E("pattern-" + t, "E_R_001_03", !1), !1; if (!IsValidInputNumber(l[0])) return e && E("pattern-option-" + t, "E_R_001_03", !1), !1; if (!a.val() && !l.val()) return e && E("pattern-" + t, "E_R_001_01"), !1; if ("" !== l.val() && Number(a.val()) > Number(l.val())) return e && E("pattern-" + t, "E_R_001_04", !1), !1 } else { if (!$(`#pattern-${t} select`).val()) return e && E("pattern-" + t, "E_R_001_01"), !1; if (0 === $(`#pattern-option-${t} select`).val().length) return e && E("pattern-option-" + t, "E_R_001_01"), !1 } return !0 } }(e) && m(1, e); if (["1", "2"].includes($("#option-search").val())) { if (!$("#exam-item-type-2 select").val()) return e && E("exam-item-type-2", "E_R_001_01"), !1; t = t && m(2) } return t } function m(e, t = !0) { if ($(`#exam-item-type-${e} select`).val()) { if (!$(`#exam-item-${e} select`).val()) return t && E("exam-item-" + e, "E_R_001_01"), !1; if (!$(`#pattern-${e} select`).val()) return t && E("pattern-" + e, "E_R_001_01"), !1; if (0 === $(`#pattern-option-${e} select`).val().length) return t && E("pattern-option-" + e, "E_R_001_01"), !1 } return !0 } function E(e, t, a = !0) { var l = $(`span[name=msg-for-${e}]`); l.text(`${a && l.attr("field-name") || ""}${Resources[t]}`) } function p() { $("#condition-item-2 .hs-condition-2 .ui.dropdown").addClass("disabled"), $("#pattern-option-2 select").prop("disabled", !0) } $("#search").click((function () { if ($("span[name^=msg-for-]").text(""), !u()) return; d = !0, ShowSearchLoading(); var e = examResultController.search.getSearchData(), t = $("#exam-item-1 select").val(), a = $("#exam-item-2 select").val(); !function () { const e = "0" !== $("#option-search-judgment").val(), t = r.findIndex((e => "judgmentFunction" === e.data)), a = $("#judgmentFunction option:selected").text(); $(c.column(t).header()).text(a), c.column(t).visible(e) }(), function () { const e = {}; for (let t = 3; t < 3 + examResultController.search.detailedItemSimpleColumnAmount; t++) { const a = $("#option-search-item-" + t).val(), l = a && "0" !== a, o = $(`#exam-item-${t} select`).val(), n = r.findIndex((e => e.data === "item" + t)); if (l && !e[o]) { e[o] = !0, o && CallAction("/ExamResult/GetEnumItem?itemId=" + o, "GET", null, (e => { examResultController.search["enumItem" + t] = e }), !1); const a = $(`#exam-item-${t} option:selected`).text(); $(c.column(n).header()).text(a), c.column(n).visible(!0) } else c.column(n).visible(!1) } }(); const l = r.findIndex((e => "item1" === e.data)), o = r.findIndex((e => "item2" === e.data)); c.columns([l, o]).visible(!0); var n = []; e.ConditionItem1.ItemId || n.push(l), e.ConditionItem2.ItemId && "0" != $("#option-search").val() || n.push(o), c.columns(n).visible(!1), $(c.column(l).header()).html($(`#exam-item-1 option[value=${t}]`).text()), $(c.column(o).header()).html($(`#exam-item-2 option[value=${a}]`).text()), CallAction("/ExamResult/GetEnumItem?itemId=" + t, "GET", null, (e => examResultController.search.enumItem1 = e), !1), CallAction("/ExamResult/GetEnumItem?itemId=" + a, "GET", null, (e => examResultController.search.enumItem2 = e), !1), c.order([]).search(JSON.stringify(e)).draw(), sessionStorage.setItem(examResultController.search.searchSessionName, JSON.stringify(e)), examResultController.search.invertSelectMode = !1, examResultController.search.selectedResults = [], $("#check-all").prop("checked", !1), $(".checkItem").prop("checked", !1), examResultController.search.ToggleExportButton() })), $("#form").on("change", (() => $("#clearSearch").prop("disabled", !1))), $("#clearSearch").click((() => { sessionStorage.removeItem(examResultController.search.searchSessionName), location.reload() })), p(), $("#option-search").on("change", (() => { "0" !== $("#option-search").val() ? ($("#condition-item-2 .hs-condition-2 .ui.dropdown").removeClass("disabled"), $("#pattern-option-2 select").prop("disabled", !1)) : p() })), $("#parentDepartment").on("change", (() => { if ($("#department").html("<option></option>"), $("#departmentDropdown .text").html(""), $("#parentDepartment").val()) { var e = new FormData; e.append("parentId", $("#parentDepartment").val()), CallAction("/ExamResult/GetChildrenDepartments", "Post", e, (e => { $("#department").html("<option value = '0' selected = true>--</option>"), e.forEach((e => $("#department").append(`<option value=${e.id}>${e.displayName}</option>`))) }), !1) } })); for (let e = 3; e < 3 + examResultController.search.detailedItemSimpleColumnAmount; e++)examResultController.search.ToggleDetailItemSearch(e); examResultController.search.ToggleJudgment() }, LoadPatternDropdown: function (e) { const t = $(`#exam-item-${e} :selected`).data("type"); var a = $("#pattern-" + e), l = $("#pattern-option-" + e), o = $("#from-" + e), r = $("#to-" + e); if (e >= 3 && (a.toggle(!t), l.toggle(!t), o.toggle(!!t), r.toggle(!!t)), 1 === e || 2 === e || 0 === t) { var n = new FormData; n.append("itemId", $(`#exam-item-${e} select`).val()), CallAction("/ExamResult/GetPatterns", "Post", n, (t => { var a = $(`#pattern-${e} select`); a.html("<option></option>"), t.forEach(((e, t) => a.append(`<option value=${e.id}>${t + 1}</option>`))), $(`#pattern-${e} .text`).html(""), examResultController.search.LoadPatternOption(e) }), !1) } else o.find("input").val(""), r.find("input").val("") }, LoadPatternOption: function (e) { var t = new FormData; t.append("patternId", $(`#pattern-${e} select`).val()), CallAction("/ExamResult/GetPatternOptions", "Post", t, (t => { var a = $(`#pattern-option-${e} select`); a.html(""), t.forEach((e => a.append(`<option data-value1=${e.value1} value=${e.id}>${e.name}</option>`))) }), !1) }, LoadItemDropdown: function (e) { var t = new FormData; const a = $(`#exam-item-type-${e} select`).val(); t.append("typeId", a), CallAction("/ExamResult/GetItems", "Post", t, (t => { var l = $(`#exam-item-${e} select`); l.html("<option></option>"), t.filter((e => "2" !== a || e.name !== Resources["Guidance Management Classification"] && e.name !== Resources.Age)).forEach((e => { l.append(`<option data-type=${e.type || 0} value=${e.id}>${e.name}</option>`) })), $(`#exam-item-${e} .text`).html(""), examResultController.search.LoadPatternDropdown(e) }), !1) }, getSearchData: function () { const e = []; for (var t = 3; t < 3 + examResultController.search.detailedItemSimpleColumnAmount; t++) { const a = $("#option-search-item-" + t).val(), l = a && "0" !== a ? { PreCondition: a, TypeId: $(`#exam-item-type-${t} select`).val(), ItemId: $(`#exam-item-${t} select`).val(), PatternId: $(`#pattern-${t} select`).val(), PatternOptionIds: $(`#pattern-option-${t} select`).val(), From: $(`#from-${t} input`).val(), To: $(`#to-${t} input`).val(), SearchType: $(`#exam-item-${t} :selected`).data("type") } : {}; e.push(l) } return { DateFrom: $("#txtStartDate").val(), DateTo: $("#txtEndDate").val(), AgeFrom: $("#startAge").val(), AgeTo: $("#endAge").val(), DepartmentId: $("#department").val(), ParentDepartmentId: $("#parentDepartment").val(), PreCondition: $("#option-search").val(), ConditionItem1: { TypeId: $("#exam-item-type-1 select").val(), ItemId: $("#exam-item-1 select").val(), PatternId: $("#pattern-1 select").val(), PatternOptionIds: $("#pattern-option-1 select").val() }, ConditionItem2: { TypeId: $("#exam-item-type-2 select").val(), ItemId: $("#exam-item-2 select").val(), PatternId: $("#pattern-2 select").val(), PatternOptionIds: $("#pattern-option-2 select").val() }, Genders: examResultController.search.getCheckboxValues(".hs-gender"), HasComments: examResultController.search.getCheckboxValues(".hs-hasComments"), WorkTypes: examResultController.search.getCheckboxValues(".hs-workType"), GMCFrom: $("#GMCFrom").val(), GMCTo: $("#GMCTo").val(), JudgmentFunction: $("#judgmentFunction").val(), JudgmentFunctionName: $("#judgmentFunction option:selected").text(), PreConditionJudgment: $("#option-search-judgment").val(), JudgmentFrom: $("#judgmentFrom").val(), JudgmentTo: $("#judgmentTo").val(), DetailedItemSimple: e, Password: btoa($("#pdf-password").val()) } }, getCheckboxValues: function (e) { const t = []; return $(e).each(((e, a) => { $(a).prop("checked") && t.push($(a).val()) })), t }, reSearch: function () { var e = JSON.parse(sessionStorage.getItem(examResultController.search.searchSessionName)); if (e) { e.DateFrom && $(".ui.calendar.txtStartDate").calendar("set date", new Date(e.DateFrom)), e.DateTo && $(".ui.calendar.txtEndDate").calendar("set date", new Date(e.DateTo)), $("#parentDepartment").val(e.ParentDepartmentId).trigger("change"), $("#department").val(e.DepartmentId).trigger("change"), $("#option-search").val(e.PreCondition).trigger("change"), $("#startAge").val(e.AgeFrom).trigger("change"), $("#endAge").val(e.AgeTo).trigger("change"), $("#GMCFrom").val(e.GMCFrom).trigger("change"), $("#GMCTo").val(e.GMCTo).trigger("change"), $("#option-search-judgment").val(e.PreConditionJudgment).trigger("change"), $("#judgmentFunction").val(e.JudgmentFunction).trigger("change"), $("#judgmentFrom").val(e.JudgmentFrom).trigger("change"), $("#judgmentTo").val(e.JudgmentTo).trigger("change"), e.ConditionItem1.ItemId && ($(".ui.fluid.accordion.detail .title").click(), $("#exam-item-type-1 select").val(e.ConditionItem1.TypeId).trigger("change"), $("#exam-item-1 select").val(e.ConditionItem1.ItemId).trigger("change"), $("#pattern-1 select").val(e.ConditionItem1.PatternId).trigger("change"), $("#pattern-option-1 select").val(e.ConditionItem1.PatternOptionIds).trigger("change")), e.ConditionItem2.ItemId && ($("#exam-item-type-2 select").val(e.ConditionItem2.TypeId).trigger("change"), $("#exam-item-2 select").val(e.ConditionItem2.ItemId).trigger("change"), $("#pattern-2 select").val(e.ConditionItem2.PatternId).trigger("change"), $("#pattern-option-2 select").val(e.ConditionItem2.PatternOptionIds).trigger("change")), $(".hs-gender").each(((t, a) => { $(a).prop("checked", e.Genders.includes($(a).val())) })), $(".hs-hasComments").each(((t, a) => { $(a).prop("checked", e.HasComments.includes($(a).val())) })), $(".hs-workType").each(((t, a) => { $(a).prop("checked", e.WorkTypes.includes($(a).val())) })); const t = Math.min(e.DetailedItemSimple?.length || 0, examResultController.search.detailedItemSimpleColumnAmount); for (let a = 3; a < 3 + t; a++) { const t = e.DetailedItemSimple[a - 3]; $("#option-search-item-" + a).val(t.PreCondition).trigger("change"), $(`#exam-item-type-${a} select`).val(t.TypeId).trigger("change"), $(`#exam-item-${a} select`).val(t.ItemId).trigger("change"), $(`#pattern-${a} select`).val(t.PatternId).trigger("change"), $(`#pattern-option-${a} select`).val(t.PatternOptionIds).trigger("change"), $(`#from-${a} input`).val(t.From).trigger("change"), $(`#to-${a} input`).val(t.To).trigger("change") } SearchAfterInit("#search") } }, ToggleDetailItemSearch: function (e) { const t = $("#option-search-item-" + e).val(), a = null === t || "0" === t; for (var l = 1; l <= 2; l++)$(`#item-${e}-${l} .ui.dropdown:not(.toggler)`).toggleClass("disabled", a), $(`#item-${e}-${l} .ui.input`).toggleClass("disabled", a), $(`#item-${e}-${l} .ui.input input`).toggleClass("hs-disabled", a), $(`#item-${e}-${l} select`).toggleClass("hs-disabled", a) }, ToggleJudgment: function () { const e = "0" === $("#option-search-judgment").val(); for (var t = 1; t <= 2; t++)$(`#judgment-${t} .ui.dropdown:not(.toggler)`).toggleClass("disabled", e) }, SelectRow: function (e) { if (!examResultController.search.invertSelectMode && e.checked || examResultController.search.invertSelectMode && !e.checked) examResultController.search.selectedResults.push(e.value); else { const t = examResultController.search.selectedResults.indexOf(e.value); t > -1 && examResultController.search.selectedResults.splice(t, 1) } const t = $("#tableExamResult").DataTable().page.info().recordsTotal, a = !examResultController.search.invertSelectMode && examResultController.search.selectedResults.length === t || examResultController.search.invertSelectMode && !examResultController.search.selectedResults.length; $("#check-all").prop("checked", a), examResultController.search.ToggleExportButton() }, SelectAllRows: function (e) { examResultController.search.invertSelectMode = e.checked, examResultController.search.selectedResults = [], $(".checkItem").prop("checked", e.checked), examResultController.search.ToggleExportButton() }, ToggleExportButton: function () { const e = $("#tableExamResult").DataTable().page.info().recordsTotal, t = !examResultController.search.invertSelectMode && !examResultController.search.selectedResults.length || examResultController.search.invertSelectMode && examResultController.search.selectedResults.length === e; $("#export").prop("disabled", t), $("#sendBulkEmail").prop("disabled", t), $("#btn-personal-management").toggleClass("disabled", t), $("#btn-reinspection").toggleClass("disabled", t), $("#btn-personal-result").toggleClass("disabled", t) }, ExportResult: function () { const e = examResultController.search.getSearchData(); e.invertSelectMode = examResultController.search.invertSelectMode, e.selectedIds = examResultController.search.selectedResults, DownloadFile("/Pdf/DownloadAllExamResultPdf?searchValue=" + JSON.stringify(e)) }, DownloadPdfExamResult: function (e) { const t = examResultController.search.getSearchData(); t.invertSelectMode = examResultController.search.invertSelectMode, t.selectedIds = examResultController.search.selectedResults; let a = encodeURI(`/Pdf/DownloadExamResultPdf?type=${e}&searchValue=${JSON.stringify(t)}`); DownloadFile(a) } }, examResultDetail: { patientInfo: { sex: null, patientCode: null, companyCode: null, healthFacilityCode: null, yearClassification: null, examResultId: null, returnExamResultId: null }, init: function () { $(".ui.dropdown").dropdown(), $(".ui.accordion").accordion("setting", { exclusive: !1 }), $(".ui.eight.item.menu .item").click((function () { $(".ui.menu .item").removeClass("active"), $(this).addClass("active"); var e = new FormData; e.append("examItemTab", this.getAttribute("tab-id")), e.append("patientCode", examResultController.examResultDetail.patientInfo.patientCode), e.append("companyCode", examResultController.examResultDetail.patientInfo.companyCode), e.append("healthFacilityCode", examResultController.examResultDetail.patientInfo.healthFacilityCode), e.append("examTime", $("#content-result .hs-table-detail-result thead tr th div").length), e.append("examResultId", examResultController.examResultDetail.patientInfo.examResultId), e.append("returnExamResultId", examResultController.examResultDetail.patientInfo.returnExamResultId), CallAction("/ExamResult/GetTabView", "POST", e, (e => { $("#tab-content").html(e), $("#content-result").scrollTop(0), examResultController.examResultDetail.setColor(examResultController.examResultDetail.patientInfo.sex) })) })); var e = new URLSearchParams(window.location.search).get("tab"); e || (e = "0"), $(`a[data-tab="tab-${e}"]`).trigger("click"); var t = $("#content-result table th:nth-child(2)").width(); function a(e) { var a = $("#content-result").scrollLeft(), l = e ? a + 5 * t : a - 5 * t; $("#content-result").scrollLeft(l) } function l() { var e = 0, t = 0; "undefined" != typeof InstallTrigger && (e = 5, t = 15), $("#content-result").width($(window).width() + t - 250), $("#content-result").height($(window).height() - (413 + e)), $("#area-btn-pagging").css("padding-left", $("#content-result th")[2].getBoundingClientRect().left - 250 + 37 + "px") } $("#btn-pre-page").click((() => { a(!1) })), $("#btn-next-page").click((() => { a(!0) })), l(), $(window).resize(l), $("#buttonBack").click((function (e) { e.preventDefault(), examResultController.backToReturnUrl() })) }, setColor: function (e = 1) { function t(e) { e.mapping_code.forEach((t => { for (var a = $(`[mapping-code=${t}]`), l = 0; l < a.length; l++)e.rule.forEach((e => { switch (e.type) { case TYPE_COLOR_ITEM.BETWEEN: $(a[l]).attr("compare-value") >= e.values[0] && $(a[l]).attr("compare-value") <= e.values[1] && (a[l].style.backgroundColor = e.color); break; case TYPE_COLOR_ITEM.EXACT: $(a[l]).attr("compare-value") == e.values && (a[l].style.backgroundColor = e.color, e.values || (a[l].style.padding = "0px 20px")); break; case TYPE_COLOR_ITEM.INCLUDE: e.values.includes($(a[l]).attr("compare-value")) && (a[l].style.backgroundColor = e.color); break; case TYPE_COLOR_ITEM.MORETHAN: $(a[l]).attr("compare-value") > e.values && (a[l].style.backgroundColor = e.color); break; case TYPE_COLOR_ITEM.LESSTHAN: $(a[l]).attr("compare-value") < e.values && (a[l].style.backgroundColor = e.color); break; case TYPE_COLOR_ITEM.BEGIN: $(a[l]).attr("compare-value") >= e.values && (a[l].style.backgroundColor = e.color); break; case TYPE_COLOR_ITEM.END: $(a[l]).attr("compare-value") <= e.values && (a[l].style.backgroundColor = e.color); break; case TYPE_COLOR_ITEM.NOT: $(a[l]).attr("compare-value") != e.values && (a[l].style.backgroundColor = e.color); break; case TYPE_COLOR_ITEM.NOT_EMPTY_TEXT: $(a[l]).text().trim() && (a[l].style.backgroundColor = e.color); break; case TYPE_COLOR_ITEM.DEFAULT: a[l].style.backgroundColor = e.color; break; case TYPE_COLOR_ITEM.NOT_INCLUDE: e.values.includes($(a[l]).attr("compare-value")) || (a[l].style.backgroundColor = e.color) } })) })) } ITEM_COLORS.forEach((e => { t(e) })), ITEM_COLORS_BY_SEX.forEach((a => { a.sex == e && t(a) })), ITEM_COLORS_BY_REFERENCE.forEach((e => { !function (e) { e.mapping_code.forEach((t => { for (var a = $(`[mapping-code=${t}]`), l = 1 == e.level ? $(`[mapping-code=${e.reference_code}][item-level=1]`) : $(`[mapping-code=${e.reference_code}]`), o = 0; o < a.length; o++)e.rule.forEach((e => { let t = l.length > o ? l[o] : l[o - l.length]; switch (e.type) { case TYPE_COLOR_ITEM.BETWEEN: $(t).attr("compare-value") >= e.values[0] && $(t).attr("compare-value") <= e.values[1] && (a[o].style.backgroundColor = e.color); break; case TYPE_COLOR_ITEM.EXACT: $(t).attr("compare-value") == e.values && (a[o].style.backgroundColor = e.color, e.values || (a[o].style.padding = "0px 20px")); break; case TYPE_COLOR_ITEM.INCLUDE: e.values.includes($(t).attr("compare-value")) && (a[o].style.backgroundColor = e.color); break; case TYPE_COLOR_ITEM.MORETHAN: $(t).attr("compare-value") > e.values && (a[o].style.backgroundColor = e.color); break; case TYPE_COLOR_ITEM.LESSTHAN: $(t).attr("compare-value") < e.values && (a[o].style.backgroundColor = e.color); break; case TYPE_COLOR_ITEM.BEGIN: $(t).attr("compare-value") >= e.values && (a[o].style.backgroundColor = e.color); break; case TYPE_COLOR_ITEM.END: $(t).attr("compare-value") <= e.values && (a[o].style.backgroundColor = e.color); break; case TYPE_COLOR_ITEM.NOT: $(t).attr("compare-value") != e.values && (a[o].style.backgroundColor = e.color); break; case TYPE_COLOR_ITEM.NOT_EMPTY_TEXT: $(t).text().trim() && (a[o].style.backgroundColor = e.color); break; case TYPE_COLOR_ITEM.INCLUDE: e.values.includes($(t).attr("compare-value")) || (a[o].style.backgroundColor = e.color) } })) })) }(e) })) }, expand: function (e, t) { var a = $(`[data-sub-item-of=${e}]`); if (a.is(":hidden")) { a.show(), $(`span[icon-of=${e}]`).text("[－]"); let o = $("#content-result"), r = o.height(), n = o.scrollTop(), i = a[0].offsetTop, s = i - n, c = t.clientHeight; if (s > r - c) { let e = 0; for (var l = 0; l < a.length; l++)e += a[l].clientHeight; if (e < r - c) { let t = e - (r - s) + 5; o.scrollTop(n + t) } else o.scrollTop(i - c - 22) } } else a.hide(), $(`span[icon-of=${e}]`).text("[＋]") }, deleteReInspection: function (e) { var t = CreateConfirmMessage(Resources.E_R003_04, DIALOG_MESSAGE_TYPE.WARNING); ShowDialog(t, (() => { var t = new FormData; t.append("id", e), CallAction("/ExamResult/DeleteReInspection", "POST", t, (() => { RedirectToPage(`/ExamResult/ExamResultDetail?id=${examResultController.examResultDetail.patientInfo.examResultId}&tab=6`) })) })) } }, detailResultForIndustrialDoctor: { displayLimmitWorkItemTypeTypes: null, examResultHealthGuidanceTypes: null, dataIndustrialInit: null, isViewOnly: !1, init: function (e) { function t(e, t, a, l = !1) { $(e).click((() => { l && $(document).scrollTop(135), a && a(), $(t).modal("show") })), $(t + " .hs-action-close").click((() => $(t).modal("hide"))) } function a(e) { $("[tab-content]").hide(), $(`[tab-content=${e}]`).show(), 1 == e ? $(".btn-of-tab-1").show() : $(".btn-of-tab-1").hide() } function l(e, t) { var a = new FormData; a.append("examItemTab", e), a.append("patientCode", examResultController.examResultDetail.patientInfo.patientCode), a.append("companyCode", examResultController.examResultDetail.patientInfo.companyCode), a.append("healthFacilityCode", examResultController.examResultDetail.patientInfo.healthFacilityCode), a.append("limmitExamTime", 5), a.append("examTime", 5), a.append("isView", !1), a.append("examResultId", examResultController.examResultDetail.patientInfo.examResultId), a.append("returnExamResultId", examResultController.examResultDetail.patientInfo.returnExamResultId), CallAction("/ExamResult/GetTabView", "POST", a, (e => { $(t).html(e) }), !1) } function o(e, t, a) { $(t).dimmer({ closable: !1, duration: 0 }), $(e).dimmer({ closable: !1, duration: 0 }), $(e + " .hs-action-close-children-modal").click((() => { a() ? ($(e).dimmer("show"), ShowDialog(CreateConfirmMessage(Resources.C_R_003_01, DIALOG_MESSAGE_TYPE.WARNING), (() => { $(e).modal("hide"), $(e).dimmer("hide") }), (() => { $(e).dimmer("hide") }))) : ($(e).modal("hide"), $(t).dimmer("hide")) })), $(e).modal({ allowMultiple: !0, autofocus: !1, detachable: !1, closable: !1, duration: 0, onShow: function () { $(t).dimmer("show") }, onHide: function () { $(t).dimmer("hide") } }) } function r() { var e = $("[item-of=work-type-2] .ui.dropdown"); $("#work-type-2").is(":checked") ? e.removeClass("hs-disabled disabled") : e.addClass("hs-disabled disabled") } examResultController.detailResultForIndustrialDoctor.isViewOnly = e, $(".ui.modal").modal({ allowMultiple: !0, autofocus: !1, detachable: !1, closable: !1, duration: 0 }), $(".ui.calendar").calendar(GetObjCalendar("date", "result")), t("#btn-doctor-info", "#doctor-info-modal"), t("#btn-pre-emp-ref", "#pre-emp-ref-modal", examResultController.detailResultForIndustrialDoctor.showPreEmploymentSortRef, !1), $("#btn-edit-doctor-info").click((() => { var e = $(".hs-input-doctor-info").prop("readonly"); $(".hs-input-doctor-info").prop("readonly", !e), e ? $(".hs-input-doctor-info").removeClass("hs-disabled") : $(".hs-input-doctor-info").addClass("hs-disabled") })), $("#R014-menu .item").each((function (e, t) { var a = t.getAttribute("tab-id"), l = new FormData; l.append("examItemTab", a), l.append("patientCode", examResultController.examResultDetail.patientInfo.patientCode), l.append("companyCode", examResultController.examResultDetail.patientInfo.companyCode), l.append("healthFacilityCode", examResultController.examResultDetail.patientInfo.healthFacilityCode), l.append("yearClassification", examResultController.examResultDetail.patientInfo.yearClassification), CallAction("/ExamResult/GetR014Tab", "POST", l, (e => { $(`[tab-content=${a}]`).html(e), examResultController.examResultDetail.setColor(examResultController.examResultDetail.patientInfo.sex), $(".ui.dropdown").dropdown(), examResultController.detailResultForIndustrialDoctor.examResultHealthGuidanceTypes && examResultController.detailResultForIndustrialDoctor.examResultHealthGuidanceTypes.forEach((e => { $(`[tab-content=${a}] select[mapping-code=${e.MappingCode}]`).val(e.HealthGuidanceType).trigger("change") })); var t = 0; $("#frm-industrial-item [tab-content]").each(((e, l) => { for (var o = l.getElementsByTagName("select"), r = 0; r < l.getElementsByTagName("select").length; r++)o[r].name = `ItemIndustrialDoctorReviews[${t}].HealthGuidanceType`, $(o[r]).change((function () { let e = this.getAttribute("mapping-code"), t = this.getAttribute("item-of-tab"); $(`select[mapping-code="${e}"]:not([item-of-tab="${t}"])`).val() != $(this).val() && $(`select[mapping-code="${e}"]:not([item-of-tab="${t}"])`).val($(this).val()).trigger("change") })), a > 0 && 0 == l.getAttribute("tab-content") && $(o[r]).change(), t++ })), examResultController.detailResultForIndustrialDoctor.dataIndustrialInit = $("#frm-industrial-item").serialize().concat($("#frm-industrial-comment").serialize()) })) })), t("[name=btn-standard-question]", "#standard-question-modal", (() => { l(4, "#standard-question-modal #content-review"), $("#standard-question-modal #content-review tr").click() })), t("[name=btn-interview]", "#interview-modal", (() => { $("#interview-menu .item")[0].click() })), $("#R014-menu .item").click((function () { if ($("#R014-menu .item").removeClass("active"), $(this).addClass("active"), $(`[tab-content=${this.getAttribute("tab-id")}]`).children().length > 0) a(this.getAttribute("tab-id")); else { ShowLoading(); var e = setInterval((() => { $(`[tab-content=${this.getAttribute("tab-id")}]`).children().length > 0 && (a(this.getAttribute("tab-id")), HideLoading(), clearInterval(e)) }), 100) } })), $("#R014-menu .item")[0].click(), $("#interview-menu .item").click((function () { $("#interview-menu .item").removeClass("active"), $(this).addClass("active"), l(this.getAttribute("tab-id"), "#interview-content") })), o("#re-inspection-modal", "#interview-modal", (() => examResultController.reInspectionModal.oldForm !== $("#frm-re-inspection").serialize() || examResultController.reInspectionModal.oldDate !== $("#re-inspection-date").calendar("get date"))), o("#comment-modal", "#interview-modal", (() => $("#comment-modal #txtComment").val() !== examResultController.commentModal.oldForm)), !isViewOnly && r(), $("input[name='WorkType']").change(r) }, moveOtherPage: function (e) { examResultController.detailResultForIndustrialDoctor.isViewOnly || $("#frm-industrial-item").serialize().concat($("#frm-industrial-comment").serialize()) == examResultController.detailResultForIndustrialDoctor.dataIndustrialInit ? RedirectToPage(e) : ShowDialog(CreateConfirmMessage(Resources.C_R_003_01, DIALOG_MESSAGE_TYPE.WARNING), (() => { RedirectToPage(e) })) }, showReInspectionInfo: function (e) { CallAction(`/ExamResult/ReInspection?id=${e}&examResultId=${examResultController.examResultDetail.patientInfo.examResultId}&returnExamResultId=${examResultController.examResultDetail.patientInfo.returnExamResultId}&isView=false`, "GET", null, (e => { examResultController.reInspectionModal.loadData(e.generalPatientInfoModel.examDate, e.itemReInspections, e.examDetailItems, e.examDate), $("#re-inspection-modal").modal("show") }), !1) }, deleteReInspection: function (e) { var t = CreateConfirmMessage(Resources.E_R003_04, DIALOG_MESSAGE_TYPE.WARNING); $("#interview-modal").dimmer("show"), ShowDialog(t, (() => { var t = new FormData; t.append("id", e), CallAction("/ExamResult/DeleteReInspection", "POST", t, (() => { $("#interview-modal").modal("show"), $("#interview-menu .item")[1].click(), $("#interview-modal").dimmer("hide") })) }), (() => { $("#interview-modal").modal("show"), $("#interview-menu .item")[1].click(), $("#interview-modal").dimmer("hide") })) }, expan: function (e, t) { let a = $(`div[r014-sub-item-of=${e}]`); if (a.is(":hidden")) { a.show(), $(`span[r014-icon-of=${e}]`).text("[－]"); let o = $("#R014-menu").children('a[class="item active"]').attr("tab-id"), r = $($(".hs-item")[o]), n = r.height(), i = r.scrollTop(), s = a[0].offsetTop, c = s - i, d = t.clientHeight; if (c > n - d) { let e = 0; for (var l = 0; l < a.length; l++)e += a[l].clientHeight; if (e < n - d) { let t = e - (n - c) + 5; r.scrollTop(i + t) } else r.scrollTop(s - d) } } else $(`div[r014-sub-item-of=${e}]`).hide(), $(`span[r014-icon-of=${e}]`).text("[＋]") }, showCommentInfo: function (e, t) { examResultController.commentModal.loadData(t), $("#comment-modal").modal("show") }, showPreEmploymentSortRef: function () { var e = new FormData; e.append("patientCode", examResultController.examResultDetail.patientInfo.patientCode), e.append("companyCode", examResultController.examResultDetail.patientInfo.companyCode), e.append("healthFacilityCode", examResultController.examResultDetail.patientInfo.healthFacilityCode), e.append("yearClassification", examResultController.examResultDetail.patientInfo.yearClassification), CallAction("/ExamResult/GetOldIndustrialDoctorComments", "POST", e, (e => { for (var t = 0; t < e.data.length; t++)if (e.data[t]) for (const [l, o] of Object.entries(e.data[t])) switch (l) { case "commentDate": $(`#pre-emp-ref-modal [name=${l}${t + 1}]`).text(o.split("T")[0].replaceAll("-", "/")); break; case "workType": case "solutionType": $(`#pre-emp-ref-modal [name=${l}${t + 1}][value=${o}]`).prop("checked", !0); break; case "industrialDoctorCommentLimmitWorkTypes": if (o) for (var a = 0; a < o.length; a++)$(`#pre-emp-ref-modal [name="industrialDoctorCommentLimmitWorkTypes[${a}].limmitWorkType${t + 1}"]`).val(examResultController.detailResultForIndustrialDoctor.displayLimmitWorkItemTypeTypes[o[a].limmitWorkType]); break; default: $(`#pre-emp-ref-modal [name=${l}${t + 1}]`).text(o) } })) }, saveData: function (e) { if (examResultController.detailResultForIndustrialDoctor.isViewOnly || $("#frm-industrial-item").serialize().concat($("#frm-industrial-comment").serialize()) == examResultController.detailResultForIndustrialDoctor.dataIndustrialInit) e ? RedirectToPage("/ExamResult/DetailResultForIndustrialDoctor?id=" + e) : setTimeout((() => { ShowDialog(CreateNotifyMessage(Resources.S_R_014_08, DIALOG_MESSAGE_TYPE.SUCCESS), examResultController.backToReturnUrl) }), 200); else { $("span[message-of]").text(""), $("#frm-industrial-item [tab-content] select").parent().removeAttr("style"); var t = new FormData($("#frm-industrial-comment")[0]); t.append("examResultId", examResultController.examResultDetail.patientInfo.examResultId), ShowLoading(); var a = setInterval((() => { if (examResultController.detailResultForIndustrialDoctor.checkLoadedTabR014()) { var l = 0, o = [], r = []; $("#frm-industrial-item [tab-content]").each(((e, t) => { for (var a = t.getElementsByTagName("select"), n = 0; n < t.getElementsByTagName("select").length; n++) { a[n].name = `ItemIndustrialDoctorReviews[${l}].HealthGuidanceType`; let e = a[n].getAttribute("mapping-code"); o.includes(e) || (o.push(e), r.push({ MappingCode: e, HealthGuidanceType: a[n].value }), l++) } })); var n = []; $("select[name^=IndustrialDoctorCommentLimmitWorkTypes]").each(((e, t) => { n.push({ LimmitWorkType: $(t).val() }) })); var i = {}; t.forEach((function (e, t) { t.includes("[") && t.includes("].") || (i[t] = e) })), i.itemIndustrialDoctorReviews = r, i.industrialDoctorCommentLimmitWorkTypes = n, CallActionWithJson("/ExamResult/SaveIndustrialDoctorReview", "POST", JSON.stringify(i), (t => { t.status == RESPONSE_JSON_STATUS.OK ? ShowDialog(t.message, (() => { e ? RedirectToPage("/ExamResult/DetailResultForIndustrialDoctor?id=" + e) : setTimeout((() => { ShowDialog(CreateNotifyMessage(Resources.S_R_014_08, DIALOG_MESSAGE_TYPE.SUCCESS), examResultController.backToReturnUrl) }), 200) })) : t.data && t.data.forEach((e => { e.key.startsWith("ItemIndustrialDoctorReviews") && $(`#frm-industrial-item [tab-content] select[name='${e.key}']`).parent().css("border-color", "red"), $(`span[message-of='${e.key}']`).text(e.error) })) })), clearInterval(a) } }), 100) } }, checkLoadedTabR014: function () { return $("#frm-industrial-item [tab-content]").each(((e, t) => { if ($(t).children().length <= 0) return !1 })), !0 }, backToList: function () { examResultController.detailResultForIndustrialDoctor.isViewOnly || $("#frm-industrial-item").serialize().concat($("#frm-industrial-comment").serialize()) == examResultController.detailResultForIndustrialDoctor.dataIndustrialInit ? examResultController.backToReturnUrl() : ShowDialog(CreateConfirmMessage(Resources.C_R_003_01, DIALOG_MESSAGE_TYPE.WARNING), (() => { examResultController.backToReturnUrl() })) } }, reInspectionModal: { optionElement: "", indexRow: 0, reinspectionAndDetailedInspectionExamId: 0, oldForm: null, oldDate: null, init: function () { $(".ui.dropdown").dropdown(), $("#addNewRow").click((function () { examResultController.reInspectionModal.createRow(), examResultController.reInspectionModal.removeLastAndCreate(), $(".ui.dropdown").dropdown() })), $("#btnRegister").click((function () { for (var e = 0; e < $(".hs-item-row").length; e++)$(".hs-item-row select[name $=ReinspectionItemId]")[e].setAttribute("name", `ItemReInspections[${e}].ReinspectionItemId`), $(".hs-item-row input[name $=ResultValue]")[e].setAttribute("name", `ItemReInspections[${e}].ResultValue`), $("span[validation-for $=ReinspectionItemId]")[e].setAttribute("validation-for", `ItemReInspections[${e}].ReinspectionItemId`), $("span[validation-for $=ResultValue]")[e].setAttribute("validation-for", `ItemReInspections[${e}].ResultValue`); $("span[validation-for]").text(""); var t = new FormData($("#frm-re-inspection")[0]); t.append("ExamResultId", examResultController.examResultDetail.patientInfo.examResultId), t.append("ReinspectionAndDetailedInspectionExamId", examResultController.reInspectionModal.reinspectionAndDetailedInspectionExamId), CallAction("/ExamResult/SaveReInspectionOfModal", "POST", t, (e => { e.status == RESPONSE_JSON_STATUS.ERROR ? e.data.forEach((e => { $(`span[validation-for='${e.key}']`).text(e.error) })) : ($("#re-inspection-modal").dimmer("show"), ShowDialog(e.message, (() => { $("#re-inspection-modal").dimmer("hide"), $("#re-inspection-modal").modal("hide"), $("#interview-modal").modal("show"), $("#interview-menu .item")[1].click() }), (() => { $("#re-inspection-modal").dimmer("hide") }))) })) })) }, loadData: function (e, t, a, l) { a.forEach((function (e) { examResultController.reInspectionModal.optionElement = examResultController.reInspectionModal.optionElement.concat(`<option value="${e.value}">${e.text}</option>`) })); var o = new Date(e), r = new Date; $("#re-inspection-date").calendar(GetObjCalendarMinMax("date", "result", o, r, examResultController.reInspectionModal.changeExamDate)), $("#re-inspection-date").calendar("set date", l), examResultController.reInspectionModal.oldDate = $("#re-inspection-date").calendar("get date") }, createRow: function (e) { var t = examResultController.reInspectionModal.indexRow, a = e ? e.id : "new-row-" + t; e = e || { reinspectionItemId: null, resultValue: "" }, $(".hs-item-row-validate").last().after(`\n                <div class="fields sch-form-inline-fields hs-item-row" id="${a}">\n                    <div class="six wide field">\n                        <select class="ui fluid dropdown" id="select-${t}" name="ItemReInspections[${t}].ReinspectionItemId">\n                            <option></option>\n                            ${examResultController.reInspectionModal.optionElement}\n                        </select>\n                    </div>\n                    <div class="nine wide field">\n                        <input name="ItemReInspections[${t}].ResultValue" maxlength="250" value="${e.resultValue}" autocomplete="off" />\n                    </div>\n                    <div class="one wide field hs-delete-icon" icon-of="${a}">\n                        <a href="#" onclick="examResultController.reInspectionModal.deleteRow('${a}')"><i class="large trash alternate icon"></i></a>\n                    </div>\n                </div>\n                <div class="fields sch-form-inline-fields hs-item-row-validate" id="row-validate-${a}">\n                    <div class="six wide field">\n                        <span validation-for="ItemReInspections[${t}].ReinspectionItemId" class="hs-text-red"></span>\n                    </div>\n                    <div class="nine wide field">\n                        <span validation-for="ItemReInspections[${t}].ResultValue" class="hs-text-red"></span>\n                    </div>   \n                </div>`), $("#select-" + t).dropdown(), $("#select-" + t).val(e.reinspectionItemId).trigger("change"), examResultController.reInspectionModal.indexRow++ }, changeExamDate: function (e) { examResultController.reInspectionModal.indexRow = 0; var t = new FormData; t.append("examResultId", examResultController.examResultDetail.patientInfo.examResultId), t.append("examDate", FormatDate(new Date(e), SYSTEM_DATE_FORMAT)), CallAction("/ExamResult/GetReinspectionResultByDate", "Post", t, (function (e) { $(".hs-item-row").remove(), $(".hs-item-row-validate:not(#default-item)").remove(), $("span[validation-for]").text(""), e.data ? (examResultController.reInspectionModal.reinspectionAndDetailedInspectionExamId = e.data[0].reinspectionAndDetailedInspectionExamId, e.data.forEach((e => { examResultController.reInspectionModal.createRow(e) }))) : (examResultController.reInspectionModal.reinspectionAndDetailedInspectionExamId = 0, examResultController.reInspectionModal.createRow()), examResultController.reInspectionModal.removeLastAndCreate(), examResultController.reInspectionModal.oldForm = $("#frm-re-inspection").serialize() })) }, deleteRow: function (e) { $("#" + e).remove(), $("#row-validate-" + e).remove(), examResultController.reInspectionModal.removeLastAndCreate() }, removeLastAndCreate: function () { var e = $(".hs-delete-icon[icon-of]"); 1 == e.length ? e.html('<i class="large trash alternate icon"></i>') : e.each(((e, t) => { t.innerHTML = `<a href="#" onclick="examResultController.reInspectionModal.deleteRow('${t.getAttribute("icon-of")}')"><i class="large trash alternate icon"></i></a>` })) } }, commentModal: { oldForm: null, saveComment: function (e) { $("#errTxtComment").text(""), $("#errorIndustrialDoctor").text(""); var t = new FormData; t.append("examResultId", examResultController.examResultDetail.patientInfo.examResultId), t.append("comment", $("#txtComment").val()), t.append("userId", $("#lstIndustrialDoctors").val()), t.append("commentType", e), CallAction("/ExamResult/SaveCommentByExamResult", "Post", t, (function (e) { if (e.status == RESPONSE_JSON_STATUS.ERROR) switch (e.data.field) { case "commentDoctor": $("#errTxtComment").text(e.data.message.message); break; case "userComment": $("#errorIndustrialDoctor").text($("#errorIndustrialDoctor").attr("displayname") + e.data.message.message); break; default: RedirectToPage(e.url) } else $("#comment-modal").dimmer("show"), ShowDialog(e.message, (function () { $("#interview-menu .item")[0].click(), $("#comment-modal").dimmer("hide"), $("#comment-modal").modal("hide") }), (() => { $("#comment-modal").dimmer("hide") })) })) }, loadData: function (e) { var t = new FormData; t.append("examId", examResultController.examResultDetail.patientInfo.examResultId), t.append("commentType", e), CallAction("/ExamResult/GetCommentInfo", "POST", t, (e => { $("#txtComment").val(e.comment); var t = ""; e.listDoctor.forEach((e => { t += `<option ${e.selected ? "selected" : ""} value="${e.value}">${e.text}</option>` })), $("#lstIndustrialDoctors").html(t), this.oldForm = $("#txtComment").val() }), !1) } }, detailResultForPatient: { examId: null, init: function () { $("#btn-expan-comment").click((() => { var e = $(window).width() < 768 ? "mobile-expanable-comment" : "expanable-comment", t = "#" + e, a = "none" == $(t).css("display") ? "block" : "none"; $(t).attr("style", `display:${a} !important`), document.getElementById(e).scrollIntoView() })), $(".hs-btn-redirect-R15-02").click((() => { RedirectToPage("/ExamResult/PatientExamList?id=" + examResultController.detailResultForPatient.examId) })), $(".hs-btn-redirect-R15-04").click((() => { RedirectToPage("/ExamResult/JudgmentExplanation") })) } }, detailResultItemLv2ForPatient: { chartLabels: [], dataCharts: null, init: function () { var e, t = 0; function a() { var a = function () { var e = examResultController.detailResultItemLv2ForPatient.dataCharts[t], a = examResultController.detailResultItemLv2ForPatient.dataCharts[t + 1], l = examResultController.detailResultItemLv2ForPatient.dataCharts[t - 1]; if ($("#btn-prev-item").prop("disabled", !l), $("#btn-next-item").prop("disabled", !a), !e) return; $("#current-item").text(e.itemName), $("#item-lv2-info-name").text(e.itemName), $("#item-lv2-info-description").html(e.description), e.description ? $("#item-lv2-info-area").show() : $("#item-lv2-info-area").hide(); return e }(); if (!a) return !1; if (!a.results) return $("#result-chart-area").hide(), !0; $("#result-chart-area").show(); let l = []; for (var o = 0; o < examResultController.detailResultItemLv2ForPatient.chartLabels.length; o++)l.push(o < a.results.length ? a.results[o] : null); if (l = l.reverse(), e) e.data.datasets = [{ label: a.itemName, backgroundColor: "rgb(255, 99, 132)", borderColor: "rgb(255, 99, 132)", data: l, segment: {} }], e.options.plugins.title.text = a.itemName, e.update(); else { var r = document.getElementById("result-chart"); e = new Chart(r, { type: "line", data: { labels: examResultController.detailResultItemLv2ForPatient.chartLabels.reverse(), datasets: [{ label: a.itemName, backgroundColor: "rgb(255, 99, 132)", borderColor: "rgb(255, 99, 132)", data: l, segment: {} }] }, options: { responsive: !0, plugins: { title: { display: !0, text: a.itemName, font: { size: 16 } }, legend: { display: !1 } }, scales: { y: { type: "linear", grace: "1%", ticks: { beginAtZero: !0 } } } } }) } return !0 } $("#btn-prev-item").click((() => { t -= 1, a() || (t += 1) })), $("#btn-next-item").click((() => { t += 1, a() || (t -= 1) })), examResultController.examResultDetail.setColor(examResultController.examResultDetail.patientInfo.sex), a() } }, backToReturnUrl: function () { const e = "ExamResultDetail-return-url"; let t = localStorage.getItem(e); null != t ? (localStorage.removeItem(e), window.location.href = t) : RedirectToPage("/ExamResult/Index") }, patientExamList: { init: function () { const e = "PatientExamList-scroll-here"; null != localStorage.getItem(e) && ($("#exam-list").scrollTop(localStorage.getItem(e)), localStorage.removeItem(e)), $(".exam-item").click((function (t) { localStorage.setItem(e, $("#exam-list").scrollTop()) })) } } };
var examResultReviewController = { conditionInit: function () { StatisticsByJudgmentCategories.searchParams = window.location.pathname.replaceAll("/", ""); var e = sessionStorage.getItem(StatisticsByJudgmentCategories.searchParams); function a(e = !1) { !0 !== e ? $("#clearSearch").prop("disabled", !1) : $("#clearSearch").prop("disabled", "" === $("#startDate").val() && "" === $("#endDate").val() && "0" === $("#parentDepartment option:selected").val() && "0" === $("#department option:selected").val()) } e && (sessionStorage.removeItem(StatisticsByJudgmentCategories.searchParams), RedirectToPage(`${window.location.pathname}?${e}`)), $("#form").unbind(), $("#form").submit((function (e) { e.preventDefault(), $(".span-validate").text(""), function () { if ("" === $("#startDate").val() && "" === $("#endDate").val()) return $("#dateValidation").text($("#dateValidation").attr("display-name") + Resources.E_R_001_01), !1; if (new Date($("#startDate").val()) > new Date($("#endDate").val())) return $("#dateValidation").text(Resources.E_R_001_02), !1; return !0 }() && (StatisticsByJudgmentCategories.SetSession(), $("#form")[0].submit()) })), $("#form").change(a), $("#clearSearch").click((function () { $("#clearSearch").prop("disabled", !0), window.location = window.location.pathname })), function () { if (!location.search); }(), a(!0) }, resultInit: function (e) { var a = [{ data: null, orderable: !1, render: function (e, a, t) { return '<input class="checkItem" type="checkbox" data-id="' + t.Id + '" value="0" />' }, defaultContent: "" }, { data: "M_0701", defaultContent: "" }, { data: "M_0008", defaultContent: "" }, { data: "DepartmentCode", defaultContent: "" }]; Object.keys(e.columnHeaders).forEach((e => { a.push({ data: "" + e, orderable: !1, defaultContent: "" }) })); var t = GetUrl("/ExamResultReview/GetData"), n = { Male: $("#Male").is(":checked"), FeMale: $("#FeMale").is(":checked"), DateFrom: $("#ExamDateFrom").val(), DateTo: $("#ExamDateTo").val(), DepartmentId: $("#department").val(), ParentDepartmentId: $("#parentDepartment").val(), OrderInfo: [[1, "asc"]] }, r = [], o = $("#tableExamResultReview").DataTable(SetOrderableDatatable(t, a, { ordering: !0, default: [[1, "asc"]] }, !0, (function () { i(), d(), $(".checkItem").change((function () { let e = "" + $(this).data("id"), a = r.indexOf(e); $(this).is(":checked") ? a < 0 && r.push(e) : a > -1 && r.splice(a, 1), i(), d() })), $(".checkItem").each(((e, a) => { $(a).prop("checked", r.indexOf("" + $(a).data("id")) > -1) })) }))); function d() { $("#createSendMailGuide").prop("disabled", 0 == r.length) } function i() { let e = !!o.ajax.json() && (r.length == o.ajax.json().recordsTotal && r.length > 0); $("#check-all").prop("checked", e) } function l() { var e = new FormData; e.append("Male", $("#Male").is(":checked")), e.append("FeMale", $("#FeMale").is(":checked")), e.append("DateFrom", $("#ExamDateFrom").val()), e.append("DateTo", $("#ExamDateTo").val()), e.append("DepartmentId", $("#department").val()), e.append("ParentDepartmentId", $("#parentDepartment").val()), e.append("Ids", r.join(",")), CallAction("/ExamResultReview/SendEmails", "POST", e, c) } function c() { ShowDialog(CreateMessage(Resources.S_R_013_01, DIALOG_DISPLAY_TYPE.MESSAGE, DIALOG_MESSAGE_TYPE.SUCCESS)) } $("#reaggregate").click((() => { ShowSearchLoading(), r = [], n = { Male: $("#Male").is(":checked"), FeMale: $("#FeMale").is(":checked"), DateFrom: $("#ExamDateFrom").val(), DateTo: $("#ExamDateTo").val(), DepartmentId: $("#department").val(), ParentDepartmentId: $("#parentDepartment").val() }, o.search(JSON.stringify(n)).draw() })), o.on("order.dt", (function () { n.OrderInfo = o.order() })), SearchAfterInit("#reaggregate"), d(), $("#check-all").change((function () { $(this).is(":checked") ? (r = o.ajax.json().allIds, $(".checkItem").prop("checked", !0)) : (r = [], $(".checkItem").prop("checked", !1)), d() })), $("#backSettingCondition").click((function () { window.location = GetUrl("/ExamResultReview/Conditions" + e.returnQueryString) })), $("#createSendMailGuide").click((function () { var e = CreateMessage("" + Resources.C_R_013_01, DIALOG_MESSAGE_TYPE.WARNING, DIALOG_DISPLAY_TYPE.CONFIRM); ConfirmDialog(e, l) })), $("#downloadCsv").click((e => { e.preventDefault(); let a = `?Male=${n.Male}&FeMale=${n.FeMale}&DateFrom=${n.DateFrom}&DateTo=${n.DateTo}&DepartmentId=${n.DepartmentId}&ParentDepartmentId=${n.ParentDepartmentId}`; for (var t = 0; t < n.OrderInfo.length; t++)a += `&OrderInfos[${t}].OrderedColumn=${n.OrderInfo[t][0]}&OrderInfos[${t}].Direction=${n.OrderInfo[t][1]}`; RedirectToPage("/ExamResultReview/DownloadCsv" + a) })) }, downloadPdfInit: function (e) { $("#msg").hide(); var a = GetUrl("/ExamResultReview/GetDownloadPdf?id=" + e); DownloadFile(a, (() => { $("#msg").show() })) } };
function ValidateNumber() { $("input[type='number']").on("input", (function () { this.maxLength >= 0 && this.value.length > this.maxLength && (this.value = this.value.slice(0, this.maxLength)) })), $("input[type='number']").on("input", (function () { "" !== this.max && "" !== this.value && Number(this.max) < Number(this.value) && (this.value = this.max), "" !== this.min && "" !== this.value && Number(this.min) > Number(this.value) && (this.value = "") })), $("input[type='number']").on("keydown", (function () { var e = [69, 109, 189, 107, 187, 188]; return "float" !== this.dataset.type && (e = e.concat([110, 190])), e.indexOf(event.keyCode) < 0 })) } function CheckRequired(e) { e.value ? $(`span[data-valmsg-for='${e.name}']`).html("") : $(`span[data-valmsg-for='${e.name}']`).html(`<span id='${e.name}-error'>${e.getAttribute("data-val-required")}</span>`) } $(".ui.checkbox").checkbox(), $(".ui.dropdown").dropdown(), $.fn.dropdown.settings.message.noResults = "", $(".ui.modal").modal("setting", { closable: !1, duration: 0 }), ValidateNumber(), $("input[data-val-required]").focusout((function () { CheckRequired(this) })), $("select[data-val-required]").on("change", (function () { CheckRequired(this) })), $("form").submit((function () { ShowLoading() })), $(".ui.dropdown.search.selection i.dropdown.icon").click((function () { $(this.parentElement).find("input").click() }));
var IntendedExaminationController = { companyId: "", status: "", id: 0, init: function () { var e = { message: Resources.W_B_005_01_07, displayType: 1, messageType: 1 }, n = { message: Resources.W_B_005_02_4, displayType: 1, messageType: 1 }, a = $("#form").serialize(); 0 === IntendedExaminationController.id ? $("#btnCancel").click((function () { a != $("#form").serialize() ? ConfirmDialog(e, (() => { RedirectToPage("/IntendedExamination/Index?companyId=" + IntendedExaminationController.companyId) })) : RedirectToPage("/IntendedExamination/Index?companyId=" + IntendedExaminationController.companyId) })) : $("#btnCancel").click((function () { a != $("#form").serialize() ? ConfirmDialog(n, (() => { RedirectToPage("/IntendedExamination/Index?companyId=" + IntendedExaminationController.companyId) })) : RedirectToPage("/IntendedExamination/Index?companyId=" + IntendedExaminationController.companyId) })), $("#btnDelete").click((function () { CallAction("/IntendedExamination/GetIntendedStatus?intendedId=" + IntendedExaminationController.id, "GET", null, (e => { $("#form").attr("action", GetUrl("/IntendedExamination/Delete")); var n = { message: Resources.W_B_005_02_3, displayType: 1, messageType: 1 }; "1" == e ? ConfirmDialog(n, (() => { $("#form").submit() })) : $("#form").submit() })) })), $("#btnSubmit").click((function () { $("#form").attr("action", GetUrl("/IntendedExamination/InsertOrUpdate")), 0 === IntendedExaminationController.id ? $("#form").submit() : CallAction("/IntendedExamination/GetIntendedStatus?intendedId=" + IntendedExaminationController.id, "GET", null, (e => { var n = { message: Resources.W_B_005_02_2, displayType: 1, messageType: 1 }; "1" == e ? ConfirmDialog(n, (() => { $("#form").submit() })) : $("#form").submit() })) })) }, Index: { init: function (e) { function n(e) { if (e.status == RESPONSE_JSON_STATUS.ERROR) if (e.message.displayType == DIALOG_DISPLAY_TYPE.CONFIRM) { var t = CreateConfirmMessage(Resources[e.message.message], e.message.messageType); ShowDialog(t, (function () { a($("#importFile")[0].files[0], !0, n) }), i) } else { let n = CreateNotifyMessage(e.message.message, e.message.messageType); ShowDialog(n, i) } else { let n = CreateNotifyMessage(Resources[e.message.message], e.message.messageType); ShowDialog(n, (() => { window.location.reload() }), i) } } function a(n, a, i) { var t = new FormData; t.append("CompanyId", e), t.append("AllowOverride", a), t.append("UploadFile", n), CallAction("/IntendedExamination/Import", "POST", t, i) } function i() { $("#importFile").val(null) } $(".ui.calendar").calendar(GetObjCalendar("date", "booking")), $("#importFile").change((function (e) { a(e.target.files[0], !1, n) })) }, latchAssign: function (e) { var n = CreateConfirmMessage(Resources.W_B_004_02, DIALOG_MESSAGE_TYPE.WARNING); ShowDialog(n, (function () { IntendedExaminationController.Index.sendMail("/IntendedExamination/LatchAssign", e) })) }, doneAssign: function (e) { var n = CreateConfirmMessage(Resources.W_B_004_01, DIALOG_MESSAGE_TYPE.WARNING); ShowDialog(n, (function () { IntendedExaminationController.Index.sendMail("/IntendedExamination/DoneAssign", e) })) }, sendMail: function (e, n) { var a = new FormData; a.append("intendedId", n), CallAction(e, "POST", a, (function (e) { 1 === e.status ? $("#tableIntendedExamination").DataTable().ajax.reload() : ShowDialog(e.message) })) } } };
var medicalPlaceController = { init: function (e) { medicalPlaceController.insertOrUpdate.rowIndex = 0; var a = { sEmptyTable: Resources.sEmptyTable, sInfo: Resources.sInfo, sInfoEmpty: Resources.sInfoEmpty, sInfoFiltered: Resources.sInfoFiltered, sLengthMenu: Resources.sLengthMenu, sLoadingRecords: Resources.sLoadingRecords, sProcessing: Resources.sProcessing, sSearch: Resources.sSearch, sZeroRecords: Resources.sZeroRecords, oPaginate: { sFirst: Resources.sFirst, sLast: Resources.sLast, sNext: Resources.sNext, sPrevious: Resources.sPrevious } }; $("#medicalPlaceList").DataTable({ processing: !0, serverSide: !0, ordering: !1, searching: !1, paging: !1, info: !1, dom: "t", language: a, ajax: { url: GetUrl("/MedicalPlace/GetList?id=" + e), type: "GET", async: !1, error: ShowCallAjaxError }, rowId: "id", columns: [{ data: "medicalPlaceCode", className: "dt-body-center" }, { data: "name", render: function (e) { var a = `<div class="ui input" style = "width:100%"><input type="text" class="hs-medical-place-name" name="name${medicalPlaceController.insertOrUpdate.rowIndex}" value="${e}" /></div> \n                    <span class="hs-text-red" id="msg-error-${medicalPlaceController.insertOrUpdate.rowIndex}Name"></span>`; return medicalPlaceController.insertOrUpdate.rowIndex++, a } }, { data: "enabled", className: "dt-body-center", render: function (e, a, l, r) { return `<div class="ui checkbox" style="width: 17px"><input type="checkbox" \n                        ${e ? " checked" : ""}  \n                        ${l.hasExaminationTimeFrame ? "disabled" : ""} \n                        name="enable${medicalPlaceController.insertOrUpdate.rowIndex}" \n                        class="hs-medical-place-enabled" ><label></label></div>` } }, { data: "isMainPlace", className: "dt-body-center", render: function (e) { return `<div class="ui radio checkbox" style="width: 17px"><input type="radio"${e ? " checked" : ""} class="hs-medical-place-isMain" name="isMain" ><label></label></div>` } }] }), medicalPlaceController.insertOrUpdate.oldForm = $("#medicalPlaceManagementModal").serialize(), $("#btn-cancel-update-medical").click((function () { if (medicalPlaceController.insertOrUpdate.oldForm !== $("#medicalPlaceManagementModal").serialize()) { var e = CreateConfirmMessage(Resources.W_A002_01, DIALOG_MESSAGE_TYPE.WARNING); ShowDialog(e, (() => location.reload()), medicalPlaceController.insertOrUpdate.showMedicalPlaceManagementModal) } else location.reload() })) }, insertOrUpdate: { rowIndex: 0, oldForm: null, showMedicalPlaceManagementModal: function (e = !1) { medicalPlaceController.insertOrUpdate.rowIndex = 0, e && ($("#medicalPlaceList").DataTable().ajax.reload(), medicalPlaceController.insertOrUpdate.oldForm = $("#medicalPlaceManagementModal").serialize()), $("#medicalPlaceList").removeClass("no-footer"), $("#medicalPlaceManagementModal").modal("show") }, addMedicalPlace: function (e) { $("#msg-error-Name").text(""); const a = { name: $("#name").val(), id: e }; $.ajax({ url: GetUrl("/MedicalPlace/Create"), method: "POST", contentType: "application/json; charset=utf-8", processData: !1, data: JSON.stringify(a) }).done((function (e) { e.status === RESPONSE_JSON_STATUS.ERROR ? $.each(e.data, (function (e, a) { $("#msg-error-" + a.key).text(a.errors[0]) })) : ($(".hs-new-medical-place-name").val(""), ShowDialog(e.message, (() => { medicalPlaceController.insertOrUpdate.showMedicalPlaceManagementModal(!0) }))) })).fail((function (e) { switch (e.status) { case 401: RedirectToPage(`/Account/PreLogin?returnUrl=${window.location.pathname}${window.location.search}`); break; case 403: RedirectToPage("/handleError/403"); break; default: ShowDialog(COMMON_ERROR_AJAX, medicalPlaceController.insertOrUpdate.showMedicalPlaceManagementModal) } })) }, updateMedicalPlaces: function () { $("#msg-error-Name").text(""); const e = $("#medicalPlaceList").DataTable().data(), a = []; e.each((function (e) { const l = `#medicalPlaceList tr[id=${e.id}]`; a.push({ id: e.id, name: $(l + " .hs-medical-place-name").val(), enabled: $(l + " .hs-medical-place-enabled").prop("checked"), IsMainPlace: $(l + " .hs-medical-place-isMain").prop("checked") }) })), $.ajax({ url: GetUrl("/MedicalPlace/EditList"), method: "POST", contentType: "application/json; charset=utf-8", processData: !1, data: JSON.stringify(a) }).done((function (e) { if (e.status === RESPONSE_JSON_STATUS.ERROR) { if (e.data) return void $.each(e.data, (function (e, a) { var l; $("#msg-error-" + (l = a.key, l.replace(/[`~!@#$%^&*()_|+\-=?;:'",.<>\{\}\[\]\\\/]/gi, ""))).text(a.errors[0]) })); ShowDialog(e.message, medicalPlaceController.insertOrUpdate.showMedicalPlaceManagementModal) } else $(".hs-new-medical-place-name").val(""), ShowDialog(e.message, (function () { location.reload() })) })).fail((function (e) { switch (e.status) { case 401: RedirectToPage(`/Account/PreLogin?returnUrl=${window.location.pathname}${window.location.search}`); break; case 403: RedirectToPage("/handleError/403"); break; default: ShowDialog(COMMON_ERROR_AJAX, medicalPlaceController.insertOrUpdate.showMedicalPlaceManagementModal) } })) } } };
var departmentController = { registerDepartment: { init: function () { var e = $("#UploadFile").val(); $("#UploadFile").on("change", (function () { $("#fileName").val(this.files[0].name) })), $("#btnCancel").click((() => { if (e != $("#UploadFile").val()) { var a = CreateConfirmMessage(Resources.C_A004_01_06, DIALOG_MESSAGE_TYPE.WARNING); ShowDialog(a, (e => { $("#frmUpload").trigger("reset") })) } else $("#frmUpload").trigger("reset") })) } } };

var RevationController = { Index: { genderEnum: null, statusEnum: null, urlAction: null, intendedId: null, invertSelectMode: !1, selectedResults: [], selectedValues: [], Init: function () { $(".ui.calendar").calendar(GetObjCalendar("date", "booking")); var e = RevationController.Index.genderEnum, a = RevationController.Index.statusEnum, t = [{ data: null, width: "15px", className: "checkbox-cell", orderable: !1, render: function (e) { const a = $("#check-all").prop("checked"); let t = a; if (!a) { const a = examResultController.search.selectedResults.includes(e.id.toString()); (examResultController.search.invertSelectMode && !a || !examResultController.search.invertSelectMode && a) && (t = !0) } return (null === e.status || "1" === e.status) && FormatDate(new Date(e.endDate), "yyyy/MM/dd hh:mm") < FormatDate(new Date(FormatDate(new Date(Date.now()), "yyyy/MM/dd")), "yyyy/MM/dd hh:mm") ? `<input class="checkItem hs-checkbox" type="checkbox" ${t ? "checked" : ""} value="${e.id}" data-examinationTimeFrameId="${e.examinationTimeFrameId}" data-startDate="${e.startDate}"/>` : "" } }, { data: null, render: function (e) { return "" === e.status ? RenderStringData(e.patientCode) : '<a class="examinationTimeFrameId" href="#" ' + function (e) { return e && e.status != RESERVATION_STATUS.Canceled ? `onclick = "RedirectToPage('/Reservation/ChangeExaminationTime?patientId=${e.id}&examinationTimeFrameId=${e.examinationTimeFrameId}')"` : 'onclick = "return false;" style="color: black; cursor: default;"' }(e) + ">" + RenderStringData(e.patientCode) + "</a>" }, className: "hs-overflow-ellipsis patientCode", createdCell: function (e, a, t, n, l) { CreateTablePopUpContent(e, a.patientCode, TABLE_PREFIX.RESERVATION, n, l) } }, { data: null, render: function (e) { return RenderStringData(e.patientName) }, className: "hs-overflow-ellipsis", createdCell: function (e, a, t, n, l) { CreateTablePopUpContent(e, a.patientName, TABLE_PREFIX.RESERVATION, n, l) }, width: "13%" }, { data: null, render: function (e) { return RenderStringData(e.patientNameKana) }, className: "hs-overflow-ellipsis", createdCell: function (e, a, t, n, l) { CreateTablePopUpContent(e, a.patientNameKana, TABLE_PREFIX.RESERVATION, n, l) }, width: "13%" }, { data: null, render: function (e) { return RenderStringData(e.department) }, className: "hs-overflow-ellipsis", createdCell: function (e, a, t, n, l) { CreateTablePopUpContent(e, a.department, TABLE_PREFIX.RESERVATION, n, l) }, width: "10%" }, { data: null, render: function (a) { return e[a.sex] }, defaultContent: "", className: "hs-overflow-ellipsis dt-body-center", createdCell: function (a, t, n, l, i) { CreateTablePopUpContent(a, e[t.sex], TABLE_PREFIX.RESERVATION, l, i) } }, { data: null, render: function (e) { return null == e.birthDay ? "" : FormatDate(new Date(e.birthDay), "yyyy/MM/dd") }, className: "fitWidth" }, { data: null, render: function (e) { return RenderStringData(e.examinationTimeFrame) }, className: "hs-overflow-ellipsis", createdCell: function (e, a, t, n, l) { CreateTablePopUpContent(e, a.examinationTimeFrame, TABLE_PREFIX.RESERVATION, n, l) } }, { data: null, render: function (e) { return RenderStringData(e.medicalPlace) }, className: "hs-overflow-ellipsis", createdCell: function (e, a, t, n, l) { CreateTablePopUpContent(e, a.medicalPlace, TABLE_PREFIX.RESERVATION, n, l) } }, { data: null, render: function (e) { var a = ""; return a = null === e.examDate || "" === e.examDate ? "" : FormatDate(new Date(e.examDate), "yyyy/MM/dd"), "" === e.status || null === e.status || "1" === e.status ? "" : `<div class="ui input right icon calendar-expand examDate">\n                                        <input type="text" autocomplete="off" class="examDate" data-patient-code="${e.patientCode}" value="${a}" />\n                                        <i class="calendar icon" aria-hidden="true"></i>\n                                    </div>` }, className: "fitWidth ui calendar" }, { data: null, render: function (e) { return FormatDate(new Date(e.startDate), "yyyy/MM/dd hh:mm") }, className: "fitWidth", orderData: [1] }, { data: null, render: function (e) { return FormatDate(new Date(e.endDate), "yyyy/MM/dd hh:mm") }, className: "fitWidth" }, { data: null, render: function (e) { return e.limitedItem }, className: "hs-overflow-ellipsis", createdCell: function (e, a, t, n, l) { CreateTablePopUpContent(e, a.limitedItem, TABLE_PREFIX.RESERVATION, n, l) } }, { data: null, render: function (e) { return "" === e.status || null === e.status || "1" === e.status ? "" : "○" }, className: "dt-body-center", createdCell: function (e, t, n, l, i) { CreateTablePopUpContent(e, a[t.status], TABLE_PREFIX.RESERVATION, l, i) } }], n = [], l = RevationController.Index.urlAction; const i = SetDatatable(l, t, !0, (function () { s = !0; let e = $("#startToEndDate").val().split(" ~ "), a = { minDate: new Date(e[0]), maxDate: new Date(e[1]) }; $(".ui.calendar-expand.examDate").calendar(GetObjCalendarOnChange("date", "booking", a)), $(".ui.calendar-expand.examDate input.examDate").unbind("keydown"), $(".ui.calendar-expand.examDate input.examDate").bind("keydown", (function (e) { $(this).removeClass("hs-border-red") })), $(".ui.calendar-expand.examDate input.examDate").bind("focusout", (function (e) { let t = $(this).val(); if (CheckValidDate(t, a.minDate, a.maxDate)) { let e = JSON.stringify({ PatientCode: $(this).data("patient-code"), IntendedId: RevationController.Index.intendedId }); CallAction("/Reservation/UpdateExamDate?examDate=" + FormatDate(new Date(t), "yyyy/MM/dd") + "&&searchValue=" + e, "GET", null, (() => { $(this).removeClass("hs-border-red") })) } else $(this).addClass("hs-border-red") })), $(".examinationTimeFrameId").on("click", o), r(), $(".checkItem").change((function () { var e = { Id: $(this).attr("value"), StartDate: $(this).attr("data-startDate"), ExaminationTimeFrameId: $(this).attr("data-examinationTimeFrameId") }; let a = n.findIndex((a => a.Id == e.Id && a.ExaminationTimeFrameId == e.ExaminationTimeFrameId)); $(this).is(":checked") ? a < 0 && n.push(e) : a > -1 && n.splice(a, 1), r() })), $(".checkItem").each(((e, a) => { var t = $(a).attr("value"), l = ($(a).attr("data-startDate"), $(a).attr("data-examinationTimeFrameId")); $(a).prop("checked", n.findIndex((e => e.Id == t && e.ExaminationTimeFrameId == l)) > -1) })) })); function r() { let e = !!m.ajax.json() && (n.length == m.ajax.json().allIds.length && n.length > 0); $("#check-all").prop("checked", e) } function o() { localStorage.setItem("page", m.page.info().page), localStorage.setItem("listSearch", JSON.stringify({ PatientCode: $("#patientCode").val(), PatientName: $("#patientName").val(), BirthDay: $("#birthDay").val(), TimeFrameName: $("#timeFrameName").val(), MedicalPlaceId: $("#hallName").val(), StartDate: $("#startDate").val(), EndDate: $("#endDate").val(), Status: $("#status").val(), IntendedId: RevationController.Index.intendedId })) } if ($("#check-all").change((function () { if ($(this).is(":checked")) { n = []; for (var e = 0; e < m.ajax.json().allIds.length; e++)n.push({ Id: m.ajax.json().allIds[e].split(" ")[0], StartDate: m.ajax.json().allIds[e].split(" ")[2] + " " + m.ajax.json().allIds[e].split(" ")[3], ExaminationTimeFrameId: m.ajax.json().allIds[e].split(" ")[1] }); $(".checkItem").prop("checked", !0) } else n = [], $(".checkItem").prop("checked", !1) })), null != localStorage.getItem("listSearch")) { var d = jQuery.parseJSON(localStorage.getItem("listSearch")); $("#patientCode").val(d.PatientCode), $("#patientName").val(d.PatientName), $("#birthDay").val(d.BirthDay), $("#timeFrameName").val(d.TimeFrameName), $("#hallName").val(d.MedicalPlaceId).change(), $("#startDate").val(d.StartDate), $("#endDate").val(d.EndDate), $("#status").val(d.Status).change(), localStorage.removeItem("listSearch") } var s = !1, c = setInterval((() => { if (null != localStorage.getItem("page")) { if (s) { let e = m.page.info().pages - 1, a = parseInt(localStorage.getItem("page")); m.page(e >= a ? a : e).draw("page"), localStorage.removeItem("page"), clearInterval(c) } } else clearInterval(c) }), 500); SearchAfterInit("#btnSearch"), i.language.sEmptyTable = null; var m = $("#tablePatientBooking").DataTable(i); $("#btnSearch").click((function () { ShowSearchLoading(), n = [], m.search(JSON.stringify({ PatientCode: $("#patientCode").val(), PatientName: $("#patientName").val(), BirthDay: $("#birthDay").val(), TimeFrameName: $("#timeFrameName").val(), MedicalPlaceId: $("#hallName").val(), StartDate: $("#startDate").val(), EndDate: $("#endDate").val(), Status: $("#status").val(), IntendedId: RevationController.Index.intendedId })).draw() })), $("#btn-download-csv").click((function () { var e = JSON.stringify(RevationController.getSearchData()); RedirectToPage("/Reservation/DowloadCSV?searchValue=" + e) })), $("#patientCode2").on("keypress", (function (e) { if (13 === e.which) { o(); var a = JSON.stringify(RevationController.updateData()); RedirectToPage("/Reservation/UpdateStatus?searchValue=" + a + "&intendedDates=" + $("#startToEndDate").val()) } })), $(".ui.dropdown").dropdown(), $("#btn-RemindMail").on("click", (function () { if (console.log(n), 0 == n.length) { var e = CreateNotifyMessage(Resources.E_B_010_12, DIALOG_MESSAGE_TYPE.ERROR); ShowDialog(e, (() => { console.log(e) })) } else if (n.length > 0) { var a = new FormData; a.append("searchValues", JSON.stringify(n)), a.append("IntendedExaminationId", RevationController.Index.intendedId), CallAction("/Reservation/RemindEmail", "POST", a, (function (e) { console.log(e.message.message), null != e.message.message && "" != e.message.message ? ShowDialog(e.message, (() => { window.location.reload() })) : window.location.reload() })) } })); var u = null; function I(e) { ShowDialog(e.message, (() => { o(), window.location.reload() })) } function p(e) { if (e.status == RESPONSE_JSON_STATUS.ERROR) if (e.message.messageType == DIALOG_MESSAGE_TYPE.WARNING) { for (var a = "<ul class='assign-warning'>", t = 0; t < e.data.length; t++) { let l = e.data[t]; a = (a = (a = a.concat("<li>")).concat(Resources[l.msgCode])).concat("<ul>"); for (var n = 0; n < l.items.length; n++) { let e = l.items[n]; a = (a = (a = a.concat("<li>")).concat(`${e.values[0]}     ${e.values[1]}`)).concat("</li>") } a = (a = a.concat("</ul>")).concat("</li>") } e.message.message = a, ShowDialog(e.message, (() => { h(!0) })) } else ShowDialog(e.message); else ShowDialog(e.message, (() => { window.location.reload() })) } function h(e) { var a = new FormData; a.append("UploadFile", u), a.append("IntendedExaminationId", RevationController.Index.intendedId), a.append("IsConfirmed", e), CallAction("/Reservation/ImportPatientReservation", "POST", a, p) } $("#formUploadCsv").change((function (e) { var a, t; (u = e.target.files[0]) && (a = !1, (t = new FormData).append("UploadFile", u), t.append("IsConfirmed", a), t.append("IntendedExaminationId", RevationController.Index.intendedId), CallAction("/Reservation/UpdateMedicalExam", "POST", t, I), $("#formUploadCsv").val("")) })), $("#importReservationFile").change((function (e) { (u = e.target.files[0]) && (CallAction("/IntendedExamination/GetIntendedStatus?intendedId=" + RevationController.Index.intendedId, "GET", null, (e => { switch (e) { case INTENDED_EXAMINATION_STATUS.LATCH_ASSIGN: case INTENDED_EXAMINATION_STATUS.DONE: case INTENDED_EXAMINATION_STATUS.CANCEL: ShowDialog(CreateNotifyMessage(Resources.W_B_007_35, DIALOG_MESSAGE_TYPE.ERROR)); break; default: h(!1) } })), $("#importReservationFile").val("")) })) } }, getSearchData: function () { return { PatientCode: $("#patientCode").val(), PatientName: $("#patientName").val(), BirthDay: $("#birthDay").val(), TimeFrameName: $("#timeFrameName").val(), MedicalPlaceId: $("#hallName").val(), StartDate: $("#startDate").val(), EndDate: $("#endDate").val(), Status: $("#status").val(), IntendedId: RevationController.Index.intendedId } }, updateData: function () { return { PatientCode: $("#patientCode2").val(), IntendedId: RevationController.Index.intendedId } } };
var RolesController = { roleMTS: "", roleFacility: "", urlAction: "", urlActionClickCheckBox: "", Index: { init: function () { var e = [{ data: "virtualPatientCode", render: function (e) { return RenderStringData(e) }, title: Resources["Virtual Patient Code"] }, { data: "healthFacilityCode", render: function (e) { return RenderStringData(e) }, title: Resources["Health Facility Code"], visible: StringToBoolean(RolesController.roleMTS) }, { data: "companyContractCode", render: function (e) { return RenderStringData(e) }, title: Resources["Company Contract Code"], visible: StringToBoolean(RolesController.roleFacility) }, { data: "departmentCode", render: function (e) { return RenderStringData(e) }, title: Resources["Department Code"], visible: !StringToBoolean(RolesController.roleMTS) }, { data: null, title: Resources.Role, render: function (e, t, r) { switch (e.role) { case "MTS": return Resources.MTS; case "FacilityUser": return Resources.FacilityUser; case "ContractUser": return Resources.ContractUser; case "Patient": return Resources.Patient; case "NutritionDoctor": return Resources.NutritionDoctor; case "IndustrialDoctor": return Resources.IndustrialDoctor } } }, { data: null, title: Resources.Status, width: "7%", render: function (e, t, r, n) { return e.checkReadOnly ? e.status ? '<div class="ui checkbox"><input type="checkbox" checked disabled /><label /></div>' : '<div class="ui checkbox"><input type="checkbox" disabled /><label /></div>' : e.status ? '<div class="ui checkbox"><input type="checkbox" value="' + e.userId + '" name="ckStatus" checked /><label /></div>' : '<div class="ui checkbox"><input type="checkbox" value="' + e.userId + '" name="ckStatus" /><label /></div>' }, className: "dt-body-center" }]; document.addEventListener("DOMContentLoaded", (function () { var t = $("#tableUserRole").DataTable(SetDatatable(RolesController.urlAction, e, !1, (function () { $("input[name=ckStatus]").on("change", (function () { var e = new FormData; e.append("userId", this.value), e.append("status", this.checked), CallAction(RolesController.urlActionClickCheckBox, "POST", e) })) }))); $("#btnSearch").click((function () { ShowSearchLoading(), t.search($("#txtSearch").val()).draw() })) })) } } };
function scheduleBulkBooking() { var e, a = !1, i = !1, t = []; function n() { if (!s()) return; let a = new URLSearchParams(window.location.search); UploadFileWithInput("/ExaminationTimeFrame/CheckBulkBooking", [e], l, { intendedExamId: a.get("intendedExaminationId"), medicalPlaceId: $("#srcMedicalPlaceId option:selected").val(), waringTriggered: i, isAssignMatch: $("#cb-assign-match").is(":checked") }) } function o() { if (!s()) return; let n = new URLSearchParams(window.location.search); UploadFileWithInput("/ExaminationTimeFrame/BulkBooking", [e], c, { intendedExamId: n.get("intendedExaminationId"), medicalPlaceId: $("#srcMedicalPlaceId option:selected").val(), allowExamConflict: a, allowPlaceConflict: t, waringTriggered: i, isAssignMatch: $("#cb-assign-match").is(":checked"), isNotAssign: $("#cb-not-assign").is(":checked") }) } function s() { return !!e || (ShowMessageBox(CreateNotifyMessage(Resources.E_B_009_01_05, DIALOG_MESSAGE_TYPE.WARNING), (() => $("#upFileModal").modal("show"))), !1) } function c(e) { e.message ? r(e) : _(e) } function l(e) { e.message && e.message.message ? (e.checkclick = !0, r(e)) : e.data ? function (e) { var a = Resources["Simple check"] + "：", i = ""; if (e.status === RESPONSE_JSON_STATUS.OK) a += "OK"; else if (e.status === RESPONSE_JSON_STATUS.ERROR && e.data.length > 0) for (var t = 0; t < e.data.length; t++) { i += `<li>${Resources.unassigned_report_template}</li>`.replace("{0}", e.data[t].conditionName).replace("{1}", e.data[t].unassigned) } $("#simpleCheckResultLabel").text(a), $("#simpleCheckResult").html(i), $("#checkBulkBookingResult").show(), document.querySelector("#simpleCheckResultLabel").scrollIntoView({ behavior: "smooth" }) }(e) : _(e) } function r(e) { var a, n; switch (e.message.message) { case "S_B_009_01_04": a = u; break; case "S_B_009_13": a = void 0; break; case "W_B_009_01_11": a = m; break; case "W_B_009_01_12": a = () => { return a = e.data, t.push([a.patientId, a.examinationTimeFrameId]), void o(); var a }, n = d; break; case "W_B_009_01_13": a = g, n = d; break; case "HasWarning": i = !0, console.log(e); for (var s = "<ul class='assign-warning'>", c = 0; c < e.data.length; c++) { let a = e.data[c]; s = (s = (s = s.concat("<li>")).concat(Resources[a.msgCode])).concat("<ul>"); for (var l = 0; l < a.items.length; l++) { let e = a.items[l]; s = (s = (s = s.concat("<li>")).concat(`${e.values[0]}     ${e.values[1]}`)).concat("</li>") } s = (s = s.concat("</ul>")).concat("</li>") } return e.message.message = s, void (!0 === e.checkclick ? ShowDialog(e.message, h) : ShowDialog(e.message, k)); default: a = d, n = d }if ("W_B_009_01_11" === e.message.message) { let a = e.data[0].conditionName; e.message.message = Resources.W_B_009_01_11.replace("{0}", a) } else "W_B_009_01_12" === e.message.message ? e.message.message = Resources[e.message.message].replace("{0}", e.data.patientCode).replace("{1}", e.data.patientName).replace("{2}", e.data.medicalPlace) : e.message.message = Resources[e.message.message]; ShowDialog(e.message, a, n) } function d() { $("#upFileModal").modal("show") } function u() { let e = new URLSearchParams(window.location.search); RedirectToPage("/Reservation/Index?intendedId=" + e.get("intendedExaminationId")) } function m() { document.location.reload() } function g() { a = !0, o() } function h() { $("#upFileModal").modal("show"), n() } function k() { $("#upFileModal").modal("show"), o() } function _(e) { let a = ""; for (const [i, t] of Object.entries(e)) a = t.reduce(((e, a) => e + ("0" === i ? "" : i + "：") + Resources[a] + "<br>"), a); $("#resultText").html(a), $("#bulkBookingResult").show() } $("#bulkBookingResult").hide(), $("#checkBulkBookingResult").hide(), $("#btnUpFileModal").click((function () { var e = new FormData; e.append("medicalPlaceId", $("#srcMedicalPlaceId option:selected").val()), e.append("start", FormatDate(calendar.view.activeStart, "yyyy/MM/dd")), e.append("end", FormatDate(calendar.view.activeEnd, "yyyy/MM/dd")), CallAction("/ExaminationTimeFrame/CheckExistExaminationTimeFrame", "POST", e, (e => { 1 === e.status ? ($("#frmBulkBooking").trigger("reset"), $("#frmBulkBooking #file").val(""), $("#frmBulkBooking #fileName").val(""), $("#frmBulkBooking input[type=checkbox]").prop("checked", !1).trigger("change"), $("#upFileModal").modal("show")) : ShowMessageBox(e.message) })) })), $("#file").on("change", (function () { if (!this.files[0]) return; e = this.files[0], $("#upFileModal #file").val(""), t = [], $("#checkBulkBookingResult").hide(), $("#fileName").val(e.name); const a = function (e) { if (!e.name.toLowerCase().endsWith(".csv")) return "E_B_009_01_13"; const a = e.size / 1048576; if (!a) return "E_B_009_01_01"; if (a > 5) return "E_B_009_01_02" }(e); a ? ($("#resultText").text(Resources[a]), $("#bulkBookingResult").show()) : ($("#resultText").text(""), $("#bulkBookingResult").hide()) })), $("#cb-not-assign").on("change", (function (e) { let a = e.target.checked; $("#btnCheckFile").prop("disabled", a), $("#cb-assign-match").prop("readonly", a), a && $("#cb-assign-match").prop("checked", !1) })), $("#btnCheckFile").on("click", (function () { i = !1, n() })), $("#btnBulkBooking").on("click", (function () { i = !1, o() })), $("#btnCancelBulkBooking").on("click", (function () { $("#upFileModal").modal("hide"), $("#checkBulkBookingResult").hide(), $("#fileName").val(""), $("#resultText").text(""), $("#bulkBookingResult").hide(), e = null })) }
function toggle() { const t = $(document.documentElement), s = !t.hasClass("hs-show-sidebar"); t.toggleClass("hs-show-sidebar", s) } function showToastr(t, s, o) { var e = t, a = o; s = s; toastr.options = { closeButton: !0, newestOnTop: !1, progressBar: !1, positionClass: "toast-top-right", showDuration: 300, hideDuration: 1e3, timeOut: 5e3, extendedTimeOut: 1e3, showEasing: "swing", hideEasing: "linear", showMethod: "fadeIn", $hideMethod: "fadeOut" }; var n = toastr[e](a, s); $toastlast = n }
var StatisticCondition = { statisticConditionSearchParams: "statisticConditionSearchParams", validate: function () { return "" == $("#startDate").val() && "" == $("#endDate").val() ? ($("#dateFrom").text(Resources["Examination Date"] + Resources.E_R_001_01), !1) : new Date($("#startDate").val()) > new Date($("#endDate").val()) ? ($("#dateFrom").text(Resources.E_R_001_02), !1) : 0 != $("#exam-item-type-1 select").val() && IsNullOrEmpty($("#exam-item-1 select").val()) ? ($("#itemCondition").text($("#itemCondition").attr("displayname") + Resources.E_R_001_01), !1) : !IsNullOrEmpty($("#exam-item-1 select").val()) && IsNullOrEmpty($("#pattern-1 select").val()) ? ($("#patternCondition").text($("#patternCondition").attr("displayname") + Resources.E_R_001_01), !1) : IsNullOrEmpty($("#exam-item-type-2 select").val()) ? ($("#classifyHorizontal").text($("#classifyHorizontal").attr("displayname") + Resources.E_R_001_01), !1) : IsNullOrEmpty($("#exam-item-2 select").val()) ? ($("#itemHorizontal").text($("#itemHorizontal").attr("displayname") + Resources.E_R_001_01), !1) : IsNullOrEmpty($("#pattern-2 select").val()) ? ($("#patternHorizontal").text($("#patternHorizontal").attr("displayname") + Resources.E_R_001_01), !1) : IsNullOrEmpty($("#exam-item-type-3 select").val()) && 0 == $("#checkShowVerDepartment").prop("checked") ? ($("#classifyVertical").text($("#classifyVertical").attr("displayname") + Resources.E_R_001_01), !1) : IsNullOrEmpty($("#exam-item-3 select").val()) && 0 == $("#checkShowVerDepartment").prop("checked") ? ($("#itemVertical").text($("#itemVertical").attr("displayname") + Resources.E_R_001_01), !1) : !IsNullOrEmpty($("#pattern-3 select").val()) || 0 != $("#checkShowVerDepartment").prop("checked") || ($("#patternVertical").text($("#patternVertical").attr("displayname") + Resources.E_R_001_01), !1) }, LoadItemDropdown: function (t) { var e = new FormData; e.append("typeId", $(`#exam-item-type-${t} select`).val()), CallAction("/Statistic/GetItems", "Post", e, (e => { var a = $(`#exam-item-${t} select`); a.html("<option></option>"), e.forEach((t => a.append(`<option value=${t.id}>${t.name}</option>`))), $(`#exam-item-${t} .text`).html(""), $(`#exam-item-${t} select`).trigger("Item:updateOption"), StatisticCondition.LoadPatternDropdown(t) })) }, LoadPatternDropdown: function (t) { var e = new FormData; e.append("itemId", $(`#exam-item-${t} select`).val()), CallAction("/Statistic/GetPatterns", "Post", e, (e => { var a = $(`#pattern-${t} select`); a.html("<option></option>"), e.forEach(((t, e) => a.append(`<option value=${t.id}>${e + 1}</option>`))), $(`#pattern-${t} .text`).html(""), $(`#pattern-${t} select`).trigger("Pattern:updateOption"), StatisticCondition.LoadPatternOption(t) })) }, LoadPatternOption: function (t) { var e = new FormData; e.append("patternId", $(`#pattern-${t} select`).val()), CallAction("/Statistic/GetPatternOptions", "Post", e, (e => { $("#table-optionPattern-" + t).html(""), e.forEach(((e, a) => $("#table-optionPattern-" + t).append(`<tr><th>${e.name}</th></tr>`))) })) }, ReloadOldData: function () { if (location.search) { var t = window.location, e = new URL(t); $("#startDate").val(e.searchParams.get("EDF")), $("#endDate").val(e.searchParams.get("EDT")), $("#parentDepartment").val(e.searchParams.get("PD")).change(), $("#department").on("department:updateOption", (function () { $("#department").val(e.searchParams.get("D")), $(this).off("department:updateOption") })), $("#exam-item-type-1 select").val(e.searchParams.get("COIC")).change(), $("#exam-item-1 select").on("Item:updateOption", (function () { $("#exam-item-1 select").val(e.searchParams.get("IC")), $(this).off("Item:updateOption") })), $("#pattern-1 select").on("Pattern:updateOption", (function () { $("#pattern-1 select").val(e.searchParams.get("PC")), $(this).off("Pattern:updateOption") })), $("#exam-item-type-2 select").val(e.searchParams.get("COIH")).change(), $("#exam-item-2 select").on("Item:updateOption", (function () { $("#exam-item-2 select").val(e.searchParams.get("IH")), $(this).off("Item:updateOption") })), $("#pattern-2 select").on("Pattern:updateOption", (function () { $("#pattern-2 select").val(e.searchParams.get("PH")), $(this).off("Pattern:updateOption") })), $("#exam-item-type-3 select").val(e.searchParams.get("COIV")).change(), $("#exam-item-3 select").on("Item:updateOption", (function () { $("#exam-item-3 select").val(e.searchParams.get("IV")), $(this).off("Item:updateOption") })), $("#pattern-3 select").on("Pattern:updateOption", (function () { $("#pattern-3 select").val(e.searchParams.get("PV")), $(this).off("Pattern:updateOption") })), $("#checkShowVerDepartment").prop("checked", "true" == e.searchParams.get("IDV")), "true" == e.searchParams.get("IDV") && $("#classifyVertical").html("") } }, SetSession: function () { var t = new FormData($("#form")[0]); t.delete("__RequestVerificationToken"), sessionStorage.setItem(StatisticCondition.statisticConditionSearchParams, new URLSearchParams(t).toString()) } };
var StatisticReportMonitor = { paramReSearch: null, Init: function (e) { $("#labelPaDepartmentPrint").hide(), $("#labelDepartmentPrint").hide(), $("[name = Male][type = hidden]").prop("disabled", !0), $("[name = FeMale][type = hidden]").prop("disabled", !0), $("#numberPeople").hide(), $("#Percent").hide(), $("#backSettingCondition").click((function () { window.location.href = GetUrl("/Statistic/StatisticReportMonitorCondition" + location.search) })); var t = window.location, a = new URL(t); $("#parentDepartment").on("change", (() => { var e = new FormData; e.append("parentId", $("#parentDepartment").val()), CallAction("/Statistic/GetChildrenDepartments", "Post", e, (e => { $("#department").html("<option value = '0' selected = true>--</option>"), e.forEach((e => $("#department").append(`<option value=${e.value}>${e.text}</option>`))) }), !1) })), $("#parentDepartment").change(), "" === a.searchParams.get("ND") ? $("#department").val(a.searchParams.get("D")) : $("#department").val(a.searchParams.get("ND")), $("#download").click((function () { window.print() })), $("#form1").on("submit", (function () { StatisticReportMonitor.paramReSearch = $(this).serialize() })), window.onbeforeprint = function (t) { $("#checkNumberPeople").prop("checked") ? $("#numberPeople").show() : $("#Percent").show(), $("#checkNumberPeople").parent().hide(), $("#checkPercent").parent().hide(); var a = $("#parentDepartment option:selected").text(), r = $("#department option:selected").text(); $("#labelPaDepartmentPrint").text(a), $("#labelDepartmentPrint").text(r), $("#labelPaDepartmentPrint").show(), $("#labelDepartmentPrint").show(), $("#divParentDepartment").hide(), $("#divDepartment").hide(); var o = $(".pa-department-report .text").text(), i = $(".department-report .text").text(); i === Resources["--"] && (i = Resources.All), o === i && (i = ""), StatisticReportMonitor.FixCssPrint(), document.title = `${e.companyCode}_${Resources.SupervisoryOfficeReportingAggregate}_${o}${i}${e.subName}` }, window.onafterprint = function (e) { document.title = Resources.StatisticReportMonitor, StatisticReportMonitor.ReLoadCssPrint(), $("#checkNumberPeople").parent().show(), $("#checkPercent").parent().show(), $("#numberPeople").hide(), $("#Percent").hide(), $("#divParentDepartment").show(), $("#divDepartment").show(), $("#labelPaDepartmentPrint").hide(), $("#labelDepartmentPrint").hide() } }, FixCssPrint: function () { $("#divReportTypeLabel").removeClass("two").addClass("three"), $("#divExaminationDateLabel").removeClass("one").addClass("two"), $("#divTotalPeopleExamLabel").removeClass("two").addClass("three"), $("#divCommentPeopleLabel").removeClass("two").addClass("four"), $("#divDoctorInstructedLabel").removeClass("two").addClass("three"), $("#divShowLabel").removeClass("two").addClass("three"), $("#divDepartmentLabel").removeClass("two").addClass("three"), $("#divGenderlabel").removeClass("two").addClass("three"), $("#divCheckMale").removeClass("two").addClass("four"), $("#tableCrossStatistic").addClass("table-statistic-pdf"), $("#tableComment").addClass("table-comment-pdf") }, ReLoadCssPrint: function () { $("#divReportTypeLabel").removeClass("three").addClass("two"), $("#divExaminationDateLabel").removeClass("two").addClass("one"), $("#divTotalPeopleExamLabel").removeClass("three").addClass("two"), $("#divCommentPeopleLabel").removeClass("four").addClass("two"), $("#divDoctorInstructedLabel").removeClass("three").addClass("two"), $("#divShowLabel").removeClass("three").addClass("two"), $("#divDepartmentLabel").removeClass("three").addClass("two"), $("#divGenderlabel").removeClass("three").addClass("two"), $("#divCheckMale").removeClass("four").addClass("two"), $("#tableCrossStatistic").removeClass("table-statistic-pdf"), $("#tableComment").removeClass("table-comment-pdf") }, RedirectStatisticReportMonitorDetail: function (e = 0, t = 0) { StatisticReportMonitor.paramReSearch = StatisticReportMonitor.paramReSearch ? StatisticReportMonitor.paramReSearch : $("#form1").serialize(), StatisticReportMonitor.paramReSearch += `&r9ItemId=${e}&r9ItemType=${t}`, RedirectToPage("/Statistic/PatientStatisticReportDetail?" + StatisticReportMonitor.paramReSearch) } };
var StatisticReportMonitorCondition = { searchParams: "StatisticReportMonitorConditionSearchParams", Init: function () { var t = sessionStorage.getItem(StatisticReportMonitorCondition.searchParams); function e() { $("#clearSearch").prop("disabled", !1) } t && (sessionStorage.removeItem(StatisticReportMonitorCondition.searchParams), RedirectToPage("/Statistic/StatisticReportMonitorCondition?" + t)), $("#form").unbind(), location.search && e(), $("#parentDepartment").on("change", (() => { var t = new FormData; t.append("parentId", $("#parentDepartment").val()), CallAction("/Statistic/GetChildrenDepartments", "Post", t, (t => { $("#department").html("<option value = '0' selected = true>--</option>"), t.forEach((t => $("#department").append(`<option value=${t.value}>${t.text}</option>`))), $("#department").trigger("department:updateOption") })) })), $("#search").click((function () { $(".span-validate").text(""), StatisticReportMonitorCondition.validate() && (StatisticReportMonitorCondition.SetSession(), $("#form").submit()) })), StatisticReportMonitorCondition.ReloadOldData(), $("#clearSearch").click((function () { RedirectToPage("/Statistic/StatisticReportMonitorCondition") })), $(".ui.calendar").calendar(GetObjCalendar("date", "result")), $("#form").on("change", e), $("#clearSearch").click((() => { $("#clearSearch").prop("disabled", !0) })) }, validate: function () { return "" == $("#startDate").val() && "" == $("#endDate").val() ? ($("#dateFrom").text(Resources["Examination Date"] + Resources.E_R_001_01), !1) : !(new Date($("#startDate").val()) > new Date($("#endDate").val())) || ($("#dateFrom").text(Resources.E_R_001_02), !1) }, ReloadOldData: function () { if (location.search) { var t = window.location, e = new URL(t); $("#startDate").val(e.searchParams.get("EDF")), $("#endDate").val(e.searchParams.get("EDT")), $("#parentDepartment").val(e.searchParams.get("PD")).change(), $("#department").on("department:updateOption", (function () { $("#department").val(e.searchParams.get("D")), $(this).off("department:updateOption") })), $("#reportType").val(e.searchParams.get("RT")).change() } }, SetSession: function () { var t = new FormData($("#form")[0]); t.delete("__RequestVerificationToken"), sessionStorage.setItem(StatisticReportMonitorCondition.searchParams, new URLSearchParams(t).toString()) } };
var StatisticsByJudgmentCategories = { searchParams: "StatisticsByJudgmentCategoriesSearchParams", ConditionInit: function () { StatisticsByJudgmentCategories.searchParams = window.location.pathname.replaceAll("/", ""); var t = sessionStorage.getItem(StatisticsByJudgmentCategories.searchParams); function e(t = !1) { !0 !== t ? $("#clearSearch").prop("disabled", !1) : $("#clearSearch").prop("disabled", "" === $("#startDate").val() && "" === $("#endDate").val() && "0" === $("#parentDepartment option:selected").val() && "0" === $("#department option:selected").val()) } t && (sessionStorage.removeItem(StatisticsByJudgmentCategories.searchParams), RedirectToPage(`${window.location.pathname}?${t}`)), $("#form").unbind(), $("#form").submit((function (t) { t.preventDefault(), $(".span-validate").text(""), function () { if ("" == $("#startDate").val() && "" == $("#endDate").val()) return $("#dateValidation").text($("#dateValidation").attr("display-name") + Resources.E_R_001_01), !1; if (new Date($("#startDate").val()) > new Date($("#endDate").val())) return $("#dateValidation").text(Resources.E_R_001_02), !1; return !0 }() && (StatisticsByJudgmentCategories.SetSession(), $("#form")[0].submit()) })), $("#form").change(e), $("#clearSearch").click((function () { $("#clearSearch").prop("disabled", !0), window.location = window.location.pathname })), e(!0) }, ResultInit: function (t) { function e(e) { let a = t.examDateFrom ? FormatDate(new Date(t.examDateFrom), PDF_FILENAME_DATE_FORMAT) : "", n = t.examDateTo ? FormatDate(new Date(t.examDateTo), PDF_FILENAME_DATE_FORMAT) : "", i = $('input[name="AggregateTypeStatistic"]:checked').next().text().trim(), r = $('input[name="ExamItem"]:checked').next().text().trim(), o = function () { let t = $("#Male").is(":checked"), e = $("#FeMale").is(":checked"); return t && !e ? Resources.MaleKanji : e && !t ? Resources.FemaleKanji : Resources["Male And Female"] }(), s = function () { let t = $("#parentDepartment option:selected"), e = $("#department option:selected"); if ("0" === t.val() && "0" === e.val()) return Resources.All; let a = "0" === t.val() ? Resources.All : t.text(), n = "0" === e.val() ? Resources.All : e.text(); return `${a}${n}` }(), c = `${e}_${Resources["Judgment Categories Aggregation"]}_${s}`; c += `_${a}-${n}_${o}_${i}`, document.title = c, $("#AggregateTypeStatisticPrint").text(i), $("#ExamItemPrint").text(r), window.print(), document.title = Resources["Statistics By Judgment Categories - Result"] } $("#backSettingCondition").click((function () { window.location = GetUrl("/StatisticsByJudgmentCategories/Conditions" + t.returnQueryString) })), $("#download").click((function () { CallAction("/CompanyContract/GetCompanyCode", "GET", "companyId=" + t.companyId, e) })) }, SetSession: function () { var t = new FormData($("#form")[0]); t.delete("__RequestVerificationToken"), sessionStorage.setItem(StatisticsByJudgmentCategories.searchParams, new URLSearchParams(t).toString()) }, RediectUrl: function (t, e, a) { var n = "/StatisticsByJudgmentCategories/ListStatisticalObjectByJudgment" + location.search + "&XPatternOptionId=" + t + "&YPatternOptionId=" + e + "&DataKey=" + a; RedirectToPage(n) }, ListStatisticalObjectByJudgment: { init: function (t, e, a) { setReturnUrl = function () { localStorage.setItem("ExamResultDetail-return-url", window.location.href) }; var n = JSON.parse(t), i = [{ data: null, render: function (t, a, n, i) { return '<a href="' + e + "?Id=" + n.examResultId + '" onclick="setReturnUrl()">' + RenderStringData(n.patientCode) + "</a>" }, defaultContent: "" }, { data: null, render: function (t, e, a) { return RenderStringData(t.name) }, defaultContent: "", width: "20%" }, { data: null, render: function (t, e, a) { return RenderStringData(t.nameKana) }, defaultContent: "", width: "20%" }, { data: null, render: function (t, e, a) { return RenderStringData(t.department) }, className: "hs-overflow-ellipsis", createdCell: function (t, e, a, n, i) { CreateTablePopUpContent(t, e.department, TABLE_PREFIX.RESERVATION, n, i) }, defaultContent: "", width: "20%" }, { data: null, render: function (t, e, a, n) { return FormatDate(new Date(t.examinationDate), "yyyy/MM/dd") }, defaultContent: "", width: "8%" }, { data: null, render: function (t) { return n[t.gender] }, defaultContent: "", width: "4%" }, { data: null, render: function (t, e, a, n) { return t.dateOfBirth }, defaultContent: "", width: "11%" }]; $("#tableExamResult").DataTable(SetDatatable(a, i)), $("#backToStatisticResult").click((function () { RedirectToPage("/StatisticsByJudgmentCategories/Result" + location.search.substring(0, location.search.indexOf("&XPatternOptionId="))) })) } } };
var StatisticsSearchConditions = { Init: function (t) { function e(t) { const e = t.reduce(((t, e) => t + `<option value=${e.value}>${e.text}</option>`), ""); $("#department").html(e), $("#department").trigger("optionsLoaded") } $(".ui.calendar").calendar(GetObjCalendar("date", "result")), $("#parentDepartment").change((function () { "0" === this.value ? CallAction("/StatisticsSearchConditions/GetDepartments", "GET", "companyId=" + t, e) : CallAction("/StatisticsSearchConditions/GetChildrenDepartments", "GET", "parentId=" + this.value, e) })) } };
var userController = { patientEmailForm: "", uploadUser: { init: function () { $("#UploadFile").on("change", (function () { $("#fileName").val(this.files[0].name) })) } }, registeredUserBooking: { init: function () { function e(e) { ShowMessageBox(e.message), $("#fileName").val(""), $("#file").val("") } $("#file").on("change", (function () { $("#fileName").val(this.files[0].name) })), $("#btn-user-registration").click((function () { UploadFile("/User/UploadUserBooking", "file", e) })) } }, patientChangeEmail: { init: function () { userController.patientEmailForm = $("#form").serialize(), $("#btnCancel").click((function () { if (userController.patientEmailForm != $("#form").serialize()) { var e = CreateConfirmMessage(Resources.W_A006_01_08, DIALOG_MESSAGE_TYPE.WARNING); ShowDialog(e, (() => { RedirectToPage("/MasterMenu/Index") })) } else RedirectToPage("/MasterMenu/Index") })), $("#btnSubmit").click((function () { let e = $("#Email"); if ("" === e.val()) { let a = CreateConfirmMessage(Resources.W_A006_01_09, DIALOG_MESSAGE_TYPE.WARNING); ConfirmDialog(a, (() => $("#form").submit()), (() => { setTimeout((function () { e.focus() }), 100) })) } else $("#form").submit() })) } }, adminChangeEmail: { oldForm: null, isLoaded: !1, isSearchFacility: !0, init: function () { function e(e = !0) { var i = new FormData; i.append("companyCode", $("#CompanyCode").val()), i.append("patientCode", $("#PatientCode").val()), i.append("isSearchFacility", $("#isSearchFacility").val()), CallAction("/User/GetUserInfo", "Post", i, a, e) } function a(e) { i(), 0 != e.status ? ($("#DepartmentName").val(e.data.departmentName), $("#UserName").val(e.data.name), $("#Email").val(e.data.email), $("#UserId").val(e.data.id)) : null == e.data ? ShowDialog(e.message) : $.each(e.data, ((e, a) => { var i = $("#err-" + a.key); i.text(a.error.replaceAll("{0}", i.data("field-name"))) })) } function i() { $("span.err-mes").each((function () { $(this).text("") })) } $("#btnDisplay").click(e), $("#btnSubmit").click((() => { var a = $("#Email").val(); e(!1), $("#Email").val(a), $("#UserId").val() && (a ? $("#form").submit() : ShowDialog(CreateConfirmMessage(Resources.W_A006_01_09, DIALOG_MESSAGE_TYPE.WARNING), (() => { $("#form").submit() }), (() => { setTimeout((() => { $("#Email").focus() }), 100) }))) })), this.oldForm = $("#form").serialize(), $("#btnCancel").click((() => { if (this.oldForm != $("#form").serialize()) { var e = CreateConfirmMessage(Resources.W_A006_01_08, DIALOG_MESSAGE_TYPE.WARNING); ShowDialog(e, (() => { RedirectToPage("/MasterMenu/Index") })) } else RedirectToPage("/MasterMenu/Index") })), $("#isSearchFacility").hide(), userController.adminChangeEmail.isSearchFacility && $("#divCompany").hide(); let n = userController.adminChangeEmail.isSearchFacility ? 0 : 1; $("#isSearchFacility").val(userController.adminChangeEmail.isSearchFacility), $("input[name=rdCheckAccount]")[n].click(), $("input[name=rdCheckAccount]").on("change", (function () { let e = 1 == $(this).val(); i(), $("#isSearchFacility").val(e), e ? $("#divCompany").hide() : $("#divCompany").show(), userController.adminChangeEmail.isLoaded && ($("#DepartmentName").val(""), $("#PatientCode").val(""), $("#CompanyCode").val(""), $("#UserName").val(""), $("#Email").val(""), $("#UserId").val("")) })), userController.adminChangeEmail.isLoaded = !0 } } };