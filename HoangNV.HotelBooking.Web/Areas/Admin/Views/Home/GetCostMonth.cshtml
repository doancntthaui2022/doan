@using Microsoft.AspNetCore.Mvc.Localization
@inject IViewLocalizer Localizer
@using HoangNV.HotelBooking.BusinessLogic.Models
@inject Microsoft.Extensions.Localization.IStringLocalizer<HoangNV.HotelBooking.Web.Localization.SharedResource> _sharedLocalizer
@model List<CostRoomType>
@addTagHelper "*, HoangNV.HotelBooking.Web"
@{
    ViewBag.Title = "Index";
    Layout = "~/Areas/Admin/Views/Shared/_Layout.cshtml"; Layout = "~/Areas/Admin/Views/Shared/_Layout.cshtml";
    decimal sum = 0;
    Model.ForEach(x => sum += x.Cost);
}
<div class="ui" style="margin-top: 6rem;">
    <div class="ui form hs-form">
        <div class="ui two column stackable grid">
            <div class="sixteen wide large screen thirteen wide computer twelve wide tablet column">
                <div class="ui stackable grid">
                    <div class="sixteen wide large screen thirteen wide computer twelve wide tablet column">
                        <div class="ui stackable grid">
                            <div class="row inline fields change-range">
                                <div class=" column field ten wide">
                                    <h2>Thống kê theo tháng</h2>
                                </div>
                                <div class=" column field six wide" style="float:right">
                                    <h2>Tổng doanh thu: @sum.ToString("N0") VNĐ </h2>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="row inline fields change-range">
                        <div class=" column field sixteen wide">
                            <div class="five wide field column">
                                <label>
                                    Tháng cần lọc:
                                </label>
                            </div>
                            <div class="thirteen wide column field">
                                <div class="ui calendar" id="startDateCalendar">
                                    <div class="ui input right icon calendar-expand">
                                        <input type="text" autocomplete="off" value="@ViewBag.Year" id="startDate">
                                        <i class="calendar icon" aria-hidden="true"></i>
                                    </div>
                                </div>
                            </div>
                            <div class="hs-buttons " style="text-align: left;">
                                <input type="button" id="btnSearch" class="ui yellow button" value="Lọc" autocomplete="off" />
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<div class="row">
    <div class="col-lg-12">
        <div class="card mb-4">
            <div class="card-body">
                <div class="chart-area">
                    <canvas id="myBarChart2" style="display: block; height: 301px; width: 1000px; margin-top: 4rem;"></canvas>
                </div>
                <hr>
            </div>
        </div>
    </div>
    <div class="col-12" style="text-align:center">
        <b><i>Biểu đồ doanh thu theo từng loại phòng trong tháng</i></b>
    </div>
</div>
<resources names='new[] { "Localization.SharedResource"}'></resources>
@section Scripts{
    <script>
        var testMonth = @Html.Raw(Json.Serialize(Model));
        $('#startDateCalendar')
            .calendar({
                type: 'month',
                formatter: {
                date: function (date, settings) {
                    if (!date) return '';
                    var day = date.getDate() + '';
                    if (day.length < 2) {
                        day = '0' + day;
                    }
                    var month = (date.getMonth() + 1) + '';
                    if (month.length < 2) {
                        month = '0' + month;
                    }
                    var year = date.getFullYear();
                    return month + '/' + year;
                }
            },
            className: {
                table: 'ui celled center aligned unstackable table',
            },
            text: {
                days: ['CN', 'T2', 'T3', 'T4', 'T5', 'T6', 'T7'],
                months: ['Tháng 1', 'Tháng 2', 'Tháng 3', 'Tháng 4', 'Tháng 5', 'Tháng 6', 'Tháng 7', 'Tháng 8', 'Tháng 9', 'Tháng 10', 'Tháng 11', 'Tháng 12'],
                monthsShort: ['Th.1', 'Th.2', 'Th.3', 'Th.4', 'Th.5', 'Th.6', 'Th.7', 'Th.8', 'Th.9', 'Th.10', 'Th.11', 'Th.12'],
                today: 'Hôm nay',
                now: 'Hiện tại',
            },
            });
        $("#btnSearch").trigger('click');

        $("#btnSearch").on('click', () => {
            var date = $("#startDate").val();
            console.log(date);
            if (date == null || date == '')
            {
                var month=new Date().getMonth();
                var year=new Date().getFullYear();
                RedirectToPage("/Admin/Home/GetCostMonth?month=" + month +"&year="+year);
            }
            else{
                RedirectToPage("/Admin/Home/GetCostMonth?month=" + date.split('/')[0] +"&year="+date.split('/')[1]);
            }
        })
        var arrCostRoomTypeByMonth=[];
        var arrRoomTypeCodeByMonth=[];
        @foreach (var item in Model)
       {
           @:arrCostRoomTypeByMonth.push(@item.Cost); 
           @:arrRoomTypeCodeByMonth.push('@item.RoomTypeCode'); 
       }
       @if(Model.Count==0)
       {
           @:arrCostRoomTypeByMonth.push(0); 
           @:arrRoomTypeCodeByMonth.push("None"); 
       }
    </script>
    <script>
        // Set new default font family and font color to mimic Bootstrap's default styling
        Chart.defaults.global.defaultFontFamily = 'Nunito', '-apple-system,system-ui,BlinkMacSystemFont,"Segoe UI",Roboto,"Helvetica Neue",Arial,sans-serif';
        Chart.defaults.global.defaultFontColor = '#858796';
        function number_format(number, decimals, dec_point, thousands_sep) {
            // *     example: number_format(1234.56, 2, ',', ' ');
            // *     return: '1 234,56'
            number = (number + '').replace(',', '').replace(' ', '');
            var n = !isFinite(+number) ? 0 : +number,
                prec = !isFinite(+decimals) ? 0 : Math.abs(decimals),
                sep = (typeof thousands_sep === 'undefined') ? ',' : thousands_sep,
                dec = (typeof dec_point === 'undefined') ? '.' : dec_point,
                s = '',
                toFixedFix = function (n, prec) {
                    var k = Math.pow(10, prec);
                    return '' + Math.round(n * k) / k;
                };
            // Fix for IE parseFloat(0.55).toFixed(0) = 0;
            s = (prec ? toFixedFix(n, prec) : '' + Math.round(n)).split('.');
            if (s[0].length > 3) {
                s[0] = s[0].replace(/\B(?=(?:\d{3})+(?!\d))/g, sep);
            }
            if ((s[1] || '').length < prec) {
                s[1] = s[1] || '';
                s[1] += new Array(prec - s[1].length + 1).join('0');
            }
            return s.join(dec);
        }
        // Bar Chart Example
        var ctx = document.getElementById("myBarChart2");
        var myBarChart = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: arrRoomTypeCodeByMonth,
                datasets: [{
                    label: "Doanh thu",
                    backgroundColor: "#4e73df",
                    hoverBackgroundColor: "#2e59d9",
                    borderColor: "#4e73df",
                    data: arrCostRoomTypeByMonth,
                }],
            },
            options: {
                maintainAspectRatio: false,
                layout: {
                    padding: {
                        left: 10,
                        right: 25,
                        top: 25,
                        bottom: 0
                    }
                },
                scales: {
                    xAxes: [{
                        time: {
                            unit: 'month'
                        },
                        gridLines: {
                            display: false,
                            drawBorder: false
                        },
                        ticks: {
                            maxTicksLimit: 12,
                            fontSize: 15,
                        },
                        maxBarThickness: 25,
                    }],
                    yAxes: [{
                        ticks: {
                            min: 0,
                            //max: 10000000,
                            maxTicksLimit: 5,
                            padding: 10,
                            fontSize: 15,
                            // Include a dollar sign in the ticks
                            callback: function (value, index, values) {
                                return number_format(value)+" VNĐ";
                            }
                        },
                        gridLines: {
                            color: "rgb(0,0,0)",
                            zeroLineColor: "rgb(0,0,0)",
                            drawBorder: false,
                            borderDash: [6],
                            zeroLineBorderDash: [6]
                        }
                    }],
                },
                legend: {
                    display: false
                },
                tooltips: {
                    titleMarginBottom: 10,
                    titleFontColor: '#000',
                    titleFontSize: 15,
                    backgroundColor: "rgb(255,255,255)",
                    bodyFontColor: "#000",
                    borderColor: '#000',
                    borderWidth: 1,
                    xPadding: 15,
                    yPadding: 15,
                    displayColors: false,
                    caretPadding: 10,
                    callbacks: {
                        label: function (tooltipItem, chart) {
                            var datasetLabel = chart.datasets[tooltipItem.datasetIndex].label || '';
                            return datasetLabel + ': ' + number_format(tooltipItem.yLabel)+' VNĐ';
                        }
                    }
                },
            }
        });
    </script>
}